
lcontrol_lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002626  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002626  000026ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800168  00800168  000027c2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000027c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000236  00000000  00000000  000027e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098a  00000000  00000000  00002a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000177  00000000  00000000  000033a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000db1  00000000  00000000  00003519  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  000042cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002be  00000000  00000000  000044ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 37       	cpi	r26, 0x7B	; 123
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e2       	ldi	r30, 0x26	; 38
      78:	f6 e2       	ldi	r31, 0x26	; 38
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 45 0b 	call	0x168a	; 0x168a <main>
      8a:	0c 94 11 13 	jmp	0x2622	; 0x2622 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_set_4bit>:
int i;


//Function to Reset LCD
void lcd_set_4bit()
{
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	df 93       	push	r29
      98:	cf 93       	push	r28
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	c0 57       	subi	r28, 0x70	; 112
      a0:	d0 40       	sbci	r29, 0x00	; 0
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	fe 01       	movw	r30, r28
      ae:	e3 59       	subi	r30, 0x93	; 147
      b0:	ff 4f       	sbci	r31, 0xFF	; 255
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	a0 e8       	ldi	r26, 0x80	; 128
      b8:	bf e3       	ldi	r27, 0x3F	; 63
      ba:	80 83       	st	Z, r24
      bc:	91 83       	std	Z+1, r25	; 0x01
      be:	a2 83       	std	Z+2, r26	; 0x02
      c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      c2:	8e 01       	movw	r16, r28
      c4:	07 59       	subi	r16, 0x97	; 151
      c6:	1f 4f       	sbci	r17, 0xFF	; 255
      c8:	fe 01       	movw	r30, r28
      ca:	e3 59       	subi	r30, 0x93	; 147
      cc:	ff 4f       	sbci	r31, 0xFF	; 255
      ce:	60 81       	ld	r22, Z
      d0:	71 81       	ldd	r23, Z+1	; 0x01
      d2:	82 81       	ldd	r24, Z+2	; 0x02
      d4:	93 81       	ldd	r25, Z+3	; 0x03
      d6:	26 e6       	ldi	r18, 0x66	; 102
      d8:	36 e6       	ldi	r19, 0x66	; 102
      da:	46 ee       	ldi	r20, 0xE6	; 230
      dc:	54 e4       	ldi	r21, 0x44	; 68
      de:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
      e2:	dc 01       	movw	r26, r24
      e4:	cb 01       	movw	r24, r22
      e6:	f8 01       	movw	r30, r16
      e8:	80 83       	st	Z, r24
      ea:	91 83       	std	Z+1, r25	; 0x01
      ec:	a2 83       	std	Z+2, r26	; 0x02
      ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
      f0:	fe 01       	movw	r30, r28
      f2:	e7 59       	subi	r30, 0x97	; 151
      f4:	ff 4f       	sbci	r31, 0xFF	; 255
      f6:	60 81       	ld	r22, Z
      f8:	71 81       	ldd	r23, Z+1	; 0x01
      fa:	82 81       	ldd	r24, Z+2	; 0x02
      fc:	93 81       	ldd	r25, Z+3	; 0x03
      fe:	20 e0       	ldi	r18, 0x00	; 0
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	40 e8       	ldi	r20, 0x80	; 128
     104:	5f e3       	ldi	r21, 0x3F	; 63
     106:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__ltsf2>
     10a:	88 23       	and	r24, r24
     10c:	44 f4       	brge	.+16     	; 0x11e <lcd_set_4bit+0x8c>
		__ticks = 1;
     10e:	fe 01       	movw	r30, r28
     110:	e9 59       	subi	r30, 0x99	; 153
     112:	ff 4f       	sbci	r31, 0xFF	; 255
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	91 83       	std	Z+1, r25	; 0x01
     11a:	80 83       	st	Z, r24
     11c:	64 c0       	rjmp	.+200    	; 0x1e6 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     11e:	fe 01       	movw	r30, r28
     120:	e7 59       	subi	r30, 0x97	; 151
     122:	ff 4f       	sbci	r31, 0xFF	; 255
     124:	60 81       	ld	r22, Z
     126:	71 81       	ldd	r23, Z+1	; 0x01
     128:	82 81       	ldd	r24, Z+2	; 0x02
     12a:	93 81       	ldd	r25, Z+3	; 0x03
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	3f ef       	ldi	r19, 0xFF	; 255
     130:	4f e7       	ldi	r20, 0x7F	; 127
     132:	57 e4       	ldi	r21, 0x47	; 71
     134:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__gtsf2>
     138:	18 16       	cp	r1, r24
     13a:	0c f0       	brlt	.+2      	; 0x13e <lcd_set_4bit+0xac>
     13c:	43 c0       	rjmp	.+134    	; 0x1c4 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     13e:	fe 01       	movw	r30, r28
     140:	e3 59       	subi	r30, 0x93	; 147
     142:	ff 4f       	sbci	r31, 0xFF	; 255
     144:	60 81       	ld	r22, Z
     146:	71 81       	ldd	r23, Z+1	; 0x01
     148:	82 81       	ldd	r24, Z+2	; 0x02
     14a:	93 81       	ldd	r25, Z+3	; 0x03
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	40 e2       	ldi	r20, 0x20	; 32
     152:	51 e4       	ldi	r21, 0x41	; 65
     154:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     158:	dc 01       	movw	r26, r24
     15a:	cb 01       	movw	r24, r22
     15c:	8e 01       	movw	r16, r28
     15e:	09 59       	subi	r16, 0x99	; 153
     160:	1f 4f       	sbci	r17, 0xFF	; 255
     162:	bc 01       	movw	r22, r24
     164:	cd 01       	movw	r24, r26
     166:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     16a:	dc 01       	movw	r26, r24
     16c:	cb 01       	movw	r24, r22
     16e:	f8 01       	movw	r30, r16
     170:	91 83       	std	Z+1, r25	; 0x01
     172:	80 83       	st	Z, r24
     174:	1f c0       	rjmp	.+62     	; 0x1b4 <lcd_set_4bit+0x122>
     176:	fe 01       	movw	r30, r28
     178:	eb 59       	subi	r30, 0x9B	; 155
     17a:	ff 4f       	sbci	r31, 0xFF	; 255
     17c:	88 eb       	ldi	r24, 0xB8	; 184
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	91 83       	std	Z+1, r25	; 0x01
     182:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     184:	fe 01       	movw	r30, r28
     186:	eb 59       	subi	r30, 0x9B	; 155
     188:	ff 4f       	sbci	r31, 0xFF	; 255
     18a:	80 81       	ld	r24, Z
     18c:	91 81       	ldd	r25, Z+1	; 0x01
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	f1 f7       	brne	.-4      	; 0x18e <lcd_set_4bit+0xfc>
     192:	fe 01       	movw	r30, r28
     194:	eb 59       	subi	r30, 0x9B	; 155
     196:	ff 4f       	sbci	r31, 0xFF	; 255
     198:	91 83       	std	Z+1, r25	; 0x01
     19a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19c:	de 01       	movw	r26, r28
     19e:	a9 59       	subi	r26, 0x99	; 153
     1a0:	bf 4f       	sbci	r27, 0xFF	; 255
     1a2:	fe 01       	movw	r30, r28
     1a4:	e9 59       	subi	r30, 0x99	; 153
     1a6:	ff 4f       	sbci	r31, 0xFF	; 255
     1a8:	80 81       	ld	r24, Z
     1aa:	91 81       	ldd	r25, Z+1	; 0x01
     1ac:	01 97       	sbiw	r24, 0x01	; 1
     1ae:	11 96       	adiw	r26, 0x01	; 1
     1b0:	9c 93       	st	X, r25
     1b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1b4:	fe 01       	movw	r30, r28
     1b6:	e9 59       	subi	r30, 0x99	; 153
     1b8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ba:	80 81       	ld	r24, Z
     1bc:	91 81       	ldd	r25, Z+1	; 0x01
     1be:	00 97       	sbiw	r24, 0x00	; 0
     1c0:	d1 f6       	brne	.-76     	; 0x176 <lcd_set_4bit+0xe4>
     1c2:	27 c0       	rjmp	.+78     	; 0x212 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1c4:	8e 01       	movw	r16, r28
     1c6:	09 59       	subi	r16, 0x99	; 153
     1c8:	1f 4f       	sbci	r17, 0xFF	; 255
     1ca:	fe 01       	movw	r30, r28
     1cc:	e7 59       	subi	r30, 0x97	; 151
     1ce:	ff 4f       	sbci	r31, 0xFF	; 255
     1d0:	60 81       	ld	r22, Z
     1d2:	71 81       	ldd	r23, Z+1	; 0x01
     1d4:	82 81       	ldd	r24, Z+2	; 0x02
     1d6:	93 81       	ldd	r25, Z+3	; 0x03
     1d8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     1dc:	dc 01       	movw	r26, r24
     1de:	cb 01       	movw	r24, r22
     1e0:	f8 01       	movw	r30, r16
     1e2:	91 83       	std	Z+1, r25	; 0x01
     1e4:	80 83       	st	Z, r24
     1e6:	de 01       	movw	r26, r28
     1e8:	ad 59       	subi	r26, 0x9D	; 157
     1ea:	bf 4f       	sbci	r27, 0xFF	; 255
     1ec:	fe 01       	movw	r30, r28
     1ee:	e9 59       	subi	r30, 0x99	; 153
     1f0:	ff 4f       	sbci	r31, 0xFF	; 255
     1f2:	80 81       	ld	r24, Z
     1f4:	91 81       	ldd	r25, Z+1	; 0x01
     1f6:	8d 93       	st	X+, r24
     1f8:	9c 93       	st	X, r25
     1fa:	fe 01       	movw	r30, r28
     1fc:	ed 59       	subi	r30, 0x9D	; 157
     1fe:	ff 4f       	sbci	r31, 0xFF	; 255
     200:	80 81       	ld	r24, Z
     202:	91 81       	ldd	r25, Z+1	; 0x01
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_set_4bit+0x172>
     208:	fe 01       	movw	r30, r28
     20a:	ed 59       	subi	r30, 0x9D	; 157
     20c:	ff 4f       	sbci	r31, 0xFF	; 255
     20e:	91 83       	std	Z+1, r25	; 0x01
     210:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     212:	a5 e3       	ldi	r26, 0x35	; 53
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	e5 e3       	ldi	r30, 0x35	; 53
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	8e 7f       	andi	r24, 0xFE	; 254
     21e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     220:	a5 e3       	ldi	r26, 0x35	; 53
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	e5 e3       	ldi	r30, 0x35	; 53
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	8d 7f       	andi	r24, 0xFD	; 253
     22c:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     22e:	e5 e3       	ldi	r30, 0x35	; 53
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 e3       	ldi	r24, 0x30	; 48
     234:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     236:	a5 e3       	ldi	r26, 0x35	; 53
     238:	b0 e0       	ldi	r27, 0x00	; 0
     23a:	e5 e3       	ldi	r30, 0x35	; 53
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	84 60       	ori	r24, 0x04	; 4
     242:	8c 93       	st	X, r24
     244:	fe 01       	movw	r30, r28
     246:	e1 5a       	subi	r30, 0xA1	; 161
     248:	ff 4f       	sbci	r31, 0xFF	; 255
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	a0 ea       	ldi	r26, 0xA0	; 160
     250:	b0 e4       	ldi	r27, 0x40	; 64
     252:	80 83       	st	Z, r24
     254:	91 83       	std	Z+1, r25	; 0x01
     256:	a2 83       	std	Z+2, r26	; 0x02
     258:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     25a:	8e 01       	movw	r16, r28
     25c:	05 5a       	subi	r16, 0xA5	; 165
     25e:	1f 4f       	sbci	r17, 0xFF	; 255
     260:	fe 01       	movw	r30, r28
     262:	e1 5a       	subi	r30, 0xA1	; 161
     264:	ff 4f       	sbci	r31, 0xFF	; 255
     266:	60 81       	ld	r22, Z
     268:	71 81       	ldd	r23, Z+1	; 0x01
     26a:	82 81       	ldd	r24, Z+2	; 0x02
     26c:	93 81       	ldd	r25, Z+3	; 0x03
     26e:	26 e6       	ldi	r18, 0x66	; 102
     270:	36 e6       	ldi	r19, 0x66	; 102
     272:	46 ee       	ldi	r20, 0xE6	; 230
     274:	54 e4       	ldi	r21, 0x44	; 68
     276:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     27a:	dc 01       	movw	r26, r24
     27c:	cb 01       	movw	r24, r22
     27e:	f8 01       	movw	r30, r16
     280:	80 83       	st	Z, r24
     282:	91 83       	std	Z+1, r25	; 0x01
     284:	a2 83       	std	Z+2, r26	; 0x02
     286:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     288:	fe 01       	movw	r30, r28
     28a:	e5 5a       	subi	r30, 0xA5	; 165
     28c:	ff 4f       	sbci	r31, 0xFF	; 255
     28e:	60 81       	ld	r22, Z
     290:	71 81       	ldd	r23, Z+1	; 0x01
     292:	82 81       	ldd	r24, Z+2	; 0x02
     294:	93 81       	ldd	r25, Z+3	; 0x03
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	40 e8       	ldi	r20, 0x80	; 128
     29c:	5f e3       	ldi	r21, 0x3F	; 63
     29e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__ltsf2>
     2a2:	88 23       	and	r24, r24
     2a4:	44 f4       	brge	.+16     	; 0x2b6 <lcd_set_4bit+0x224>
		__ticks = 1;
     2a6:	fe 01       	movw	r30, r28
     2a8:	e7 5a       	subi	r30, 0xA7	; 167
     2aa:	ff 4f       	sbci	r31, 0xFF	; 255
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	91 83       	std	Z+1, r25	; 0x01
     2b2:	80 83       	st	Z, r24
     2b4:	64 c0       	rjmp	.+200    	; 0x37e <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     2b6:	fe 01       	movw	r30, r28
     2b8:	e5 5a       	subi	r30, 0xA5	; 165
     2ba:	ff 4f       	sbci	r31, 0xFF	; 255
     2bc:	60 81       	ld	r22, Z
     2be:	71 81       	ldd	r23, Z+1	; 0x01
     2c0:	82 81       	ldd	r24, Z+2	; 0x02
     2c2:	93 81       	ldd	r25, Z+3	; 0x03
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	3f ef       	ldi	r19, 0xFF	; 255
     2c8:	4f e7       	ldi	r20, 0x7F	; 127
     2ca:	57 e4       	ldi	r21, 0x47	; 71
     2cc:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__gtsf2>
     2d0:	18 16       	cp	r1, r24
     2d2:	0c f0       	brlt	.+2      	; 0x2d6 <lcd_set_4bit+0x244>
     2d4:	43 c0       	rjmp	.+134    	; 0x35c <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2d6:	fe 01       	movw	r30, r28
     2d8:	e1 5a       	subi	r30, 0xA1	; 161
     2da:	ff 4f       	sbci	r31, 0xFF	; 255
     2dc:	60 81       	ld	r22, Z
     2de:	71 81       	ldd	r23, Z+1	; 0x01
     2e0:	82 81       	ldd	r24, Z+2	; 0x02
     2e2:	93 81       	ldd	r25, Z+3	; 0x03
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	40 e2       	ldi	r20, 0x20	; 32
     2ea:	51 e4       	ldi	r21, 0x41	; 65
     2ec:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     2f0:	dc 01       	movw	r26, r24
     2f2:	cb 01       	movw	r24, r22
     2f4:	8e 01       	movw	r16, r28
     2f6:	07 5a       	subi	r16, 0xA7	; 167
     2f8:	1f 4f       	sbci	r17, 0xFF	; 255
     2fa:	bc 01       	movw	r22, r24
     2fc:	cd 01       	movw	r24, r26
     2fe:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     302:	dc 01       	movw	r26, r24
     304:	cb 01       	movw	r24, r22
     306:	f8 01       	movw	r30, r16
     308:	91 83       	std	Z+1, r25	; 0x01
     30a:	80 83       	st	Z, r24
     30c:	1f c0       	rjmp	.+62     	; 0x34c <lcd_set_4bit+0x2ba>
     30e:	fe 01       	movw	r30, r28
     310:	e9 5a       	subi	r30, 0xA9	; 169
     312:	ff 4f       	sbci	r31, 0xFF	; 255
     314:	88 eb       	ldi	r24, 0xB8	; 184
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	91 83       	std	Z+1, r25	; 0x01
     31a:	80 83       	st	Z, r24
     31c:	fe 01       	movw	r30, r28
     31e:	e9 5a       	subi	r30, 0xA9	; 169
     320:	ff 4f       	sbci	r31, 0xFF	; 255
     322:	80 81       	ld	r24, Z
     324:	91 81       	ldd	r25, Z+1	; 0x01
     326:	01 97       	sbiw	r24, 0x01	; 1
     328:	f1 f7       	brne	.-4      	; 0x326 <lcd_set_4bit+0x294>
     32a:	fe 01       	movw	r30, r28
     32c:	e9 5a       	subi	r30, 0xA9	; 169
     32e:	ff 4f       	sbci	r31, 0xFF	; 255
     330:	91 83       	std	Z+1, r25	; 0x01
     332:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     334:	de 01       	movw	r26, r28
     336:	a7 5a       	subi	r26, 0xA7	; 167
     338:	bf 4f       	sbci	r27, 0xFF	; 255
     33a:	fe 01       	movw	r30, r28
     33c:	e7 5a       	subi	r30, 0xA7	; 167
     33e:	ff 4f       	sbci	r31, 0xFF	; 255
     340:	80 81       	ld	r24, Z
     342:	91 81       	ldd	r25, Z+1	; 0x01
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	11 96       	adiw	r26, 0x01	; 1
     348:	9c 93       	st	X, r25
     34a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     34c:	fe 01       	movw	r30, r28
     34e:	e7 5a       	subi	r30, 0xA7	; 167
     350:	ff 4f       	sbci	r31, 0xFF	; 255
     352:	80 81       	ld	r24, Z
     354:	91 81       	ldd	r25, Z+1	; 0x01
     356:	00 97       	sbiw	r24, 0x00	; 0
     358:	d1 f6       	brne	.-76     	; 0x30e <lcd_set_4bit+0x27c>
     35a:	27 c0       	rjmp	.+78     	; 0x3aa <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     35c:	8e 01       	movw	r16, r28
     35e:	07 5a       	subi	r16, 0xA7	; 167
     360:	1f 4f       	sbci	r17, 0xFF	; 255
     362:	fe 01       	movw	r30, r28
     364:	e5 5a       	subi	r30, 0xA5	; 165
     366:	ff 4f       	sbci	r31, 0xFF	; 255
     368:	60 81       	ld	r22, Z
     36a:	71 81       	ldd	r23, Z+1	; 0x01
     36c:	82 81       	ldd	r24, Z+2	; 0x02
     36e:	93 81       	ldd	r25, Z+3	; 0x03
     370:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     374:	dc 01       	movw	r26, r24
     376:	cb 01       	movw	r24, r22
     378:	f8 01       	movw	r30, r16
     37a:	91 83       	std	Z+1, r25	; 0x01
     37c:	80 83       	st	Z, r24
     37e:	de 01       	movw	r26, r28
     380:	ab 5a       	subi	r26, 0xAB	; 171
     382:	bf 4f       	sbci	r27, 0xFF	; 255
     384:	fe 01       	movw	r30, r28
     386:	e7 5a       	subi	r30, 0xA7	; 167
     388:	ff 4f       	sbci	r31, 0xFF	; 255
     38a:	80 81       	ld	r24, Z
     38c:	91 81       	ldd	r25, Z+1	; 0x01
     38e:	8d 93       	st	X+, r24
     390:	9c 93       	st	X, r25
     392:	fe 01       	movw	r30, r28
     394:	eb 5a       	subi	r30, 0xAB	; 171
     396:	ff 4f       	sbci	r31, 0xFF	; 255
     398:	80 81       	ld	r24, Z
     39a:	91 81       	ldd	r25, Z+1	; 0x01
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <lcd_set_4bit+0x30a>
     3a0:	fe 01       	movw	r30, r28
     3a2:	eb 5a       	subi	r30, 0xAB	; 171
     3a4:	ff 4f       	sbci	r31, 0xFF	; 255
     3a6:	91 83       	std	Z+1, r25	; 0x01
     3a8:	80 83       	st	Z, r24
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     3aa:	a5 e3       	ldi	r26, 0x35	; 53
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	e5 e3       	ldi	r30, 0x35	; 53
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	8b 7f       	andi	r24, 0xFB	; 251
     3b6:	8c 93       	st	X, r24
     3b8:	fe 01       	movw	r30, r28
     3ba:	ef 5a       	subi	r30, 0xAF	; 175
     3bc:	ff 4f       	sbci	r31, 0xFF	; 255
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	a0 e8       	ldi	r26, 0x80	; 128
     3c4:	bf e3       	ldi	r27, 0x3F	; 63
     3c6:	80 83       	st	Z, r24
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	a2 83       	std	Z+2, r26	; 0x02
     3cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3ce:	8e 01       	movw	r16, r28
     3d0:	03 5b       	subi	r16, 0xB3	; 179
     3d2:	1f 4f       	sbci	r17, 0xFF	; 255
     3d4:	fe 01       	movw	r30, r28
     3d6:	ef 5a       	subi	r30, 0xAF	; 175
     3d8:	ff 4f       	sbci	r31, 0xFF	; 255
     3da:	60 81       	ld	r22, Z
     3dc:	71 81       	ldd	r23, Z+1	; 0x01
     3de:	82 81       	ldd	r24, Z+2	; 0x02
     3e0:	93 81       	ldd	r25, Z+3	; 0x03
     3e2:	26 e6       	ldi	r18, 0x66	; 102
     3e4:	36 e6       	ldi	r19, 0x66	; 102
     3e6:	46 ee       	ldi	r20, 0xE6	; 230
     3e8:	54 e4       	ldi	r21, 0x44	; 68
     3ea:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     3ee:	dc 01       	movw	r26, r24
     3f0:	cb 01       	movw	r24, r22
     3f2:	f8 01       	movw	r30, r16
     3f4:	80 83       	st	Z, r24
     3f6:	91 83       	std	Z+1, r25	; 0x01
     3f8:	a2 83       	std	Z+2, r26	; 0x02
     3fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     3fc:	fe 01       	movw	r30, r28
     3fe:	e3 5b       	subi	r30, 0xB3	; 179
     400:	ff 4f       	sbci	r31, 0xFF	; 255
     402:	60 81       	ld	r22, Z
     404:	71 81       	ldd	r23, Z+1	; 0x01
     406:	82 81       	ldd	r24, Z+2	; 0x02
     408:	93 81       	ldd	r25, Z+3	; 0x03
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 e8       	ldi	r20, 0x80	; 128
     410:	5f e3       	ldi	r21, 0x3F	; 63
     412:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__ltsf2>
     416:	88 23       	and	r24, r24
     418:	44 f4       	brge	.+16     	; 0x42a <lcd_set_4bit+0x398>
		__ticks = 1;
     41a:	fe 01       	movw	r30, r28
     41c:	e5 5b       	subi	r30, 0xB5	; 181
     41e:	ff 4f       	sbci	r31, 0xFF	; 255
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	91 83       	std	Z+1, r25	; 0x01
     426:	80 83       	st	Z, r24
     428:	64 c0       	rjmp	.+200    	; 0x4f2 <__stack+0x93>
	else if (__tmp > 65535)
     42a:	fe 01       	movw	r30, r28
     42c:	e3 5b       	subi	r30, 0xB3	; 179
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	60 81       	ld	r22, Z
     432:	71 81       	ldd	r23, Z+1	; 0x01
     434:	82 81       	ldd	r24, Z+2	; 0x02
     436:	93 81       	ldd	r25, Z+3	; 0x03
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	3f ef       	ldi	r19, 0xFF	; 255
     43c:	4f e7       	ldi	r20, 0x7F	; 127
     43e:	57 e4       	ldi	r21, 0x47	; 71
     440:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__gtsf2>
     444:	18 16       	cp	r1, r24
     446:	0c f0       	brlt	.+2      	; 0x44a <lcd_set_4bit+0x3b8>
     448:	43 c0       	rjmp	.+134    	; 0x4d0 <__stack+0x71>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     44a:	fe 01       	movw	r30, r28
     44c:	ef 5a       	subi	r30, 0xAF	; 175
     44e:	ff 4f       	sbci	r31, 0xFF	; 255
     450:	60 81       	ld	r22, Z
     452:	71 81       	ldd	r23, Z+1	; 0x01
     454:	82 81       	ldd	r24, Z+2	; 0x02
     456:	93 81       	ldd	r25, Z+3	; 0x03
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e2       	ldi	r20, 0x20	; 32
     45e:	51 e4       	ldi	r21, 0x41	; 65
     460:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     464:	dc 01       	movw	r26, r24
     466:	cb 01       	movw	r24, r22
     468:	8e 01       	movw	r16, r28
     46a:	05 5b       	subi	r16, 0xB5	; 181
     46c:	1f 4f       	sbci	r17, 0xFF	; 255
     46e:	bc 01       	movw	r22, r24
     470:	cd 01       	movw	r24, r26
     472:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     476:	dc 01       	movw	r26, r24
     478:	cb 01       	movw	r24, r22
     47a:	f8 01       	movw	r30, r16
     47c:	91 83       	std	Z+1, r25	; 0x01
     47e:	80 83       	st	Z, r24
     480:	1f c0       	rjmp	.+62     	; 0x4c0 <__stack+0x61>
     482:	fe 01       	movw	r30, r28
     484:	e7 5b       	subi	r30, 0xB7	; 183
     486:	ff 4f       	sbci	r31, 0xFF	; 255
     488:	88 eb       	ldi	r24, 0xB8	; 184
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	91 83       	std	Z+1, r25	; 0x01
     48e:	80 83       	st	Z, r24
     490:	fe 01       	movw	r30, r28
     492:	e7 5b       	subi	r30, 0xB7	; 183
     494:	ff 4f       	sbci	r31, 0xFF	; 255
     496:	80 81       	ld	r24, Z
     498:	91 81       	ldd	r25, Z+1	; 0x01
     49a:	01 97       	sbiw	r24, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <__stack+0x3b>
     49e:	fe 01       	movw	r30, r28
     4a0:	e7 5b       	subi	r30, 0xB7	; 183
     4a2:	ff 4f       	sbci	r31, 0xFF	; 255
     4a4:	91 83       	std	Z+1, r25	; 0x01
     4a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a8:	de 01       	movw	r26, r28
     4aa:	a5 5b       	subi	r26, 0xB5	; 181
     4ac:	bf 4f       	sbci	r27, 0xFF	; 255
     4ae:	fe 01       	movw	r30, r28
     4b0:	e5 5b       	subi	r30, 0xB5	; 181
     4b2:	ff 4f       	sbci	r31, 0xFF	; 255
     4b4:	80 81       	ld	r24, Z
     4b6:	91 81       	ldd	r25, Z+1	; 0x01
     4b8:	01 97       	sbiw	r24, 0x01	; 1
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	9c 93       	st	X, r25
     4be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4c0:	fe 01       	movw	r30, r28
     4c2:	e5 5b       	subi	r30, 0xB5	; 181
     4c4:	ff 4f       	sbci	r31, 0xFF	; 255
     4c6:	80 81       	ld	r24, Z
     4c8:	91 81       	ldd	r25, Z+1	; 0x01
     4ca:	00 97       	sbiw	r24, 0x00	; 0
     4cc:	d1 f6       	brne	.-76     	; 0x482 <__stack+0x23>
     4ce:	27 c0       	rjmp	.+78     	; 0x51e <__stack+0xbf>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4d0:	8e 01       	movw	r16, r28
     4d2:	05 5b       	subi	r16, 0xB5	; 181
     4d4:	1f 4f       	sbci	r17, 0xFF	; 255
     4d6:	fe 01       	movw	r30, r28
     4d8:	e3 5b       	subi	r30, 0xB3	; 179
     4da:	ff 4f       	sbci	r31, 0xFF	; 255
     4dc:	60 81       	ld	r22, Z
     4de:	71 81       	ldd	r23, Z+1	; 0x01
     4e0:	82 81       	ldd	r24, Z+2	; 0x02
     4e2:	93 81       	ldd	r25, Z+3	; 0x03
     4e4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     4e8:	dc 01       	movw	r26, r24
     4ea:	cb 01       	movw	r24, r22
     4ec:	f8 01       	movw	r30, r16
     4ee:	91 83       	std	Z+1, r25	; 0x01
     4f0:	80 83       	st	Z, r24
     4f2:	de 01       	movw	r26, r28
     4f4:	a9 5b       	subi	r26, 0xB9	; 185
     4f6:	bf 4f       	sbci	r27, 0xFF	; 255
     4f8:	fe 01       	movw	r30, r28
     4fa:	e5 5b       	subi	r30, 0xB5	; 181
     4fc:	ff 4f       	sbci	r31, 0xFF	; 255
     4fe:	80 81       	ld	r24, Z
     500:	91 81       	ldd	r25, Z+1	; 0x01
     502:	8d 93       	st	X+, r24
     504:	9c 93       	st	X, r25
     506:	fe 01       	movw	r30, r28
     508:	e9 5b       	subi	r30, 0xB9	; 185
     50a:	ff 4f       	sbci	r31, 0xFF	; 255
     50c:	80 81       	ld	r24, Z
     50e:	91 81       	ldd	r25, Z+1	; 0x01
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	f1 f7       	brne	.-4      	; 0x510 <__stack+0xb1>
     514:	fe 01       	movw	r30, r28
     516:	e9 5b       	subi	r30, 0xB9	; 185
     518:	ff 4f       	sbci	r31, 0xFF	; 255
     51a:	91 83       	std	Z+1, r25	; 0x01
     51c:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     51e:	a5 e3       	ldi	r26, 0x35	; 53
     520:	b0 e0       	ldi	r27, 0x00	; 0
     522:	e5 e3       	ldi	r30, 0x35	; 53
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	8e 7f       	andi	r24, 0xFE	; 254
     52a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     52c:	a5 e3       	ldi	r26, 0x35	; 53
     52e:	b0 e0       	ldi	r27, 0x00	; 0
     530:	e5 e3       	ldi	r30, 0x35	; 53
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	80 81       	ld	r24, Z
     536:	8d 7f       	andi	r24, 0xFD	; 253
     538:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     53a:	e5 e3       	ldi	r30, 0x35	; 53
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	80 e3       	ldi	r24, 0x30	; 48
     540:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     542:	a5 e3       	ldi	r26, 0x35	; 53
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	e5 e3       	ldi	r30, 0x35	; 53
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	80 81       	ld	r24, Z
     54c:	84 60       	ori	r24, 0x04	; 4
     54e:	8c 93       	st	X, r24
     550:	fe 01       	movw	r30, r28
     552:	ed 5b       	subi	r30, 0xBD	; 189
     554:	ff 4f       	sbci	r31, 0xFF	; 255
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	a0 ea       	ldi	r26, 0xA0	; 160
     55c:	b0 e4       	ldi	r27, 0x40	; 64
     55e:	80 83       	st	Z, r24
     560:	91 83       	std	Z+1, r25	; 0x01
     562:	a2 83       	std	Z+2, r26	; 0x02
     564:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     566:	8e 01       	movw	r16, r28
     568:	01 5c       	subi	r16, 0xC1	; 193
     56a:	1f 4f       	sbci	r17, 0xFF	; 255
     56c:	fe 01       	movw	r30, r28
     56e:	ed 5b       	subi	r30, 0xBD	; 189
     570:	ff 4f       	sbci	r31, 0xFF	; 255
     572:	60 81       	ld	r22, Z
     574:	71 81       	ldd	r23, Z+1	; 0x01
     576:	82 81       	ldd	r24, Z+2	; 0x02
     578:	93 81       	ldd	r25, Z+3	; 0x03
     57a:	26 e6       	ldi	r18, 0x66	; 102
     57c:	36 e6       	ldi	r19, 0x66	; 102
     57e:	46 ee       	ldi	r20, 0xE6	; 230
     580:	54 e4       	ldi	r21, 0x44	; 68
     582:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     586:	dc 01       	movw	r26, r24
     588:	cb 01       	movw	r24, r22
     58a:	f8 01       	movw	r30, r16
     58c:	80 83       	st	Z, r24
     58e:	91 83       	std	Z+1, r25	; 0x01
     590:	a2 83       	std	Z+2, r26	; 0x02
     592:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     594:	fe 01       	movw	r30, r28
     596:	ff 96       	adiw	r30, 0x3f	; 63
     598:	60 81       	ld	r22, Z
     59a:	71 81       	ldd	r23, Z+1	; 0x01
     59c:	82 81       	ldd	r24, Z+2	; 0x02
     59e:	93 81       	ldd	r25, Z+3	; 0x03
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	40 e8       	ldi	r20, 0x80	; 128
     5a6:	5f e3       	ldi	r21, 0x3F	; 63
     5a8:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__ltsf2>
     5ac:	88 23       	and	r24, r24
     5ae:	2c f4       	brge	.+10     	; 0x5ba <__stack+0x15b>
		__ticks = 1;
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	9e af       	std	Y+62, r25	; 0x3e
     5b6:	8d af       	std	Y+61, r24	; 0x3d
     5b8:	46 c0       	rjmp	.+140    	; 0x646 <__stack+0x1e7>
	else if (__tmp > 65535)
     5ba:	fe 01       	movw	r30, r28
     5bc:	ff 96       	adiw	r30, 0x3f	; 63
     5be:	60 81       	ld	r22, Z
     5c0:	71 81       	ldd	r23, Z+1	; 0x01
     5c2:	82 81       	ldd	r24, Z+2	; 0x02
     5c4:	93 81       	ldd	r25, Z+3	; 0x03
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	3f ef       	ldi	r19, 0xFF	; 255
     5ca:	4f e7       	ldi	r20, 0x7F	; 127
     5cc:	57 e4       	ldi	r21, 0x47	; 71
     5ce:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__gtsf2>
     5d2:	18 16       	cp	r1, r24
     5d4:	64 f5       	brge	.+88     	; 0x62e <__stack+0x1cf>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5d6:	fe 01       	movw	r30, r28
     5d8:	ed 5b       	subi	r30, 0xBD	; 189
     5da:	ff 4f       	sbci	r31, 0xFF	; 255
     5dc:	60 81       	ld	r22, Z
     5de:	71 81       	ldd	r23, Z+1	; 0x01
     5e0:	82 81       	ldd	r24, Z+2	; 0x02
     5e2:	93 81       	ldd	r25, Z+3	; 0x03
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	40 e2       	ldi	r20, 0x20	; 32
     5ea:	51 e4       	ldi	r21, 0x41	; 65
     5ec:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
     5f4:	bc 01       	movw	r22, r24
     5f6:	cd 01       	movw	r24, r26
     5f8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     5fc:	dc 01       	movw	r26, r24
     5fe:	cb 01       	movw	r24, r22
     600:	9e af       	std	Y+62, r25	; 0x3e
     602:	8d af       	std	Y+61, r24	; 0x3d
     604:	0f c0       	rjmp	.+30     	; 0x624 <__stack+0x1c5>
     606:	88 eb       	ldi	r24, 0xB8	; 184
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	9c af       	std	Y+60, r25	; 0x3c
     60c:	8b af       	std	Y+59, r24	; 0x3b
     60e:	8b ad       	ldd	r24, Y+59	; 0x3b
     610:	9c ad       	ldd	r25, Y+60	; 0x3c
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <__stack+0x1b3>
     616:	9c af       	std	Y+60, r25	; 0x3c
     618:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     61a:	8d ad       	ldd	r24, Y+61	; 0x3d
     61c:	9e ad       	ldd	r25, Y+62	; 0x3e
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	9e af       	std	Y+62, r25	; 0x3e
     622:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     624:	8d ad       	ldd	r24, Y+61	; 0x3d
     626:	9e ad       	ldd	r25, Y+62	; 0x3e
     628:	00 97       	sbiw	r24, 0x00	; 0
     62a:	69 f7       	brne	.-38     	; 0x606 <__stack+0x1a7>
     62c:	16 c0       	rjmp	.+44     	; 0x65a <__stack+0x1fb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     62e:	fe 01       	movw	r30, r28
     630:	ff 96       	adiw	r30, 0x3f	; 63
     632:	60 81       	ld	r22, Z
     634:	71 81       	ldd	r23, Z+1	; 0x01
     636:	82 81       	ldd	r24, Z+2	; 0x02
     638:	93 81       	ldd	r25, Z+3	; 0x03
     63a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     63e:	dc 01       	movw	r26, r24
     640:	cb 01       	movw	r24, r22
     642:	9e af       	std	Y+62, r25	; 0x3e
     644:	8d af       	std	Y+61, r24	; 0x3d
     646:	8d ad       	ldd	r24, Y+61	; 0x3d
     648:	9e ad       	ldd	r25, Y+62	; 0x3e
     64a:	9a af       	std	Y+58, r25	; 0x3a
     64c:	89 af       	std	Y+57, r24	; 0x39
     64e:	89 ad       	ldd	r24, Y+57	; 0x39
     650:	9a ad       	ldd	r25, Y+58	; 0x3a
     652:	01 97       	sbiw	r24, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <__stack+0x1f3>
     656:	9a af       	std	Y+58, r25	; 0x3a
     658:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     65a:	a5 e3       	ldi	r26, 0x35	; 53
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	e5 e3       	ldi	r30, 0x35	; 53
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	8b 7f       	andi	r24, 0xFB	; 251
     666:	8c 93       	st	X, r24
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	a0 e8       	ldi	r26, 0x80	; 128
     66e:	bf e3       	ldi	r27, 0x3F	; 63
     670:	8d ab       	std	Y+53, r24	; 0x35
     672:	9e ab       	std	Y+54, r25	; 0x36
     674:	af ab       	std	Y+55, r26	; 0x37
     676:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     678:	6d a9       	ldd	r22, Y+53	; 0x35
     67a:	7e a9       	ldd	r23, Y+54	; 0x36
     67c:	8f a9       	ldd	r24, Y+55	; 0x37
     67e:	98 ad       	ldd	r25, Y+56	; 0x38
     680:	26 e6       	ldi	r18, 0x66	; 102
     682:	36 e6       	ldi	r19, 0x66	; 102
     684:	46 ee       	ldi	r20, 0xE6	; 230
     686:	54 e4       	ldi	r21, 0x44	; 68
     688:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     68c:	dc 01       	movw	r26, r24
     68e:	cb 01       	movw	r24, r22
     690:	89 ab       	std	Y+49, r24	; 0x31
     692:	9a ab       	std	Y+50, r25	; 0x32
     694:	ab ab       	std	Y+51, r26	; 0x33
     696:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     698:	69 a9       	ldd	r22, Y+49	; 0x31
     69a:	7a a9       	ldd	r23, Y+50	; 0x32
     69c:	8b a9       	ldd	r24, Y+51	; 0x33
     69e:	9c a9       	ldd	r25, Y+52	; 0x34
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e8       	ldi	r20, 0x80	; 128
     6a6:	5f e3       	ldi	r21, 0x3F	; 63
     6a8:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__ltsf2>
     6ac:	88 23       	and	r24, r24
     6ae:	2c f4       	brge	.+10     	; 0x6ba <__stack+0x25b>
		__ticks = 1;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	98 ab       	std	Y+48, r25	; 0x30
     6b6:	8f a7       	std	Y+47, r24	; 0x2f
     6b8:	3f c0       	rjmp	.+126    	; 0x738 <__stack+0x2d9>
	else if (__tmp > 65535)
     6ba:	69 a9       	ldd	r22, Y+49	; 0x31
     6bc:	7a a9       	ldd	r23, Y+50	; 0x32
     6be:	8b a9       	ldd	r24, Y+51	; 0x33
     6c0:	9c a9       	ldd	r25, Y+52	; 0x34
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	3f ef       	ldi	r19, 0xFF	; 255
     6c6:	4f e7       	ldi	r20, 0x7F	; 127
     6c8:	57 e4       	ldi	r21, 0x47	; 71
     6ca:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__gtsf2>
     6ce:	18 16       	cp	r1, r24
     6d0:	4c f5       	brge	.+82     	; 0x724 <__stack+0x2c5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6d2:	6d a9       	ldd	r22, Y+53	; 0x35
     6d4:	7e a9       	ldd	r23, Y+54	; 0x36
     6d6:	8f a9       	ldd	r24, Y+55	; 0x37
     6d8:	98 ad       	ldd	r25, Y+56	; 0x38
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	40 e2       	ldi	r20, 0x20	; 32
     6e0:	51 e4       	ldi	r21, 0x41	; 65
     6e2:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     6e6:	dc 01       	movw	r26, r24
     6e8:	cb 01       	movw	r24, r22
     6ea:	bc 01       	movw	r22, r24
     6ec:	cd 01       	movw	r24, r26
     6ee:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	98 ab       	std	Y+48, r25	; 0x30
     6f8:	8f a7       	std	Y+47, r24	; 0x2f
     6fa:	0f c0       	rjmp	.+30     	; 0x71a <__stack+0x2bb>
     6fc:	88 eb       	ldi	r24, 0xB8	; 184
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	9e a7       	std	Y+46, r25	; 0x2e
     702:	8d a7       	std	Y+45, r24	; 0x2d
     704:	8d a5       	ldd	r24, Y+45	; 0x2d
     706:	9e a5       	ldd	r25, Y+46	; 0x2e
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <__stack+0x2a9>
     70c:	9e a7       	std	Y+46, r25	; 0x2e
     70e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     710:	8f a5       	ldd	r24, Y+47	; 0x2f
     712:	98 a9       	ldd	r25, Y+48	; 0x30
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	98 ab       	std	Y+48, r25	; 0x30
     718:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     71a:	8f a5       	ldd	r24, Y+47	; 0x2f
     71c:	98 a9       	ldd	r25, Y+48	; 0x30
     71e:	00 97       	sbiw	r24, 0x00	; 0
     720:	69 f7       	brne	.-38     	; 0x6fc <__stack+0x29d>
     722:	14 c0       	rjmp	.+40     	; 0x74c <__stack+0x2ed>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     724:	69 a9       	ldd	r22, Y+49	; 0x31
     726:	7a a9       	ldd	r23, Y+50	; 0x32
     728:	8b a9       	ldd	r24, Y+51	; 0x33
     72a:	9c a9       	ldd	r25, Y+52	; 0x34
     72c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     730:	dc 01       	movw	r26, r24
     732:	cb 01       	movw	r24, r22
     734:	98 ab       	std	Y+48, r25	; 0x30
     736:	8f a7       	std	Y+47, r24	; 0x2f
     738:	8f a5       	ldd	r24, Y+47	; 0x2f
     73a:	98 a9       	ldd	r25, Y+48	; 0x30
     73c:	9c a7       	std	Y+44, r25	; 0x2c
     73e:	8b a7       	std	Y+43, r24	; 0x2b
     740:	8b a5       	ldd	r24, Y+43	; 0x2b
     742:	9c a5       	ldd	r25, Y+44	; 0x2c
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	f1 f7       	brne	.-4      	; 0x744 <__stack+0x2e5>
     748:	9c a7       	std	Y+44, r25	; 0x2c
     74a:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     74c:	a5 e3       	ldi	r26, 0x35	; 53
     74e:	b0 e0       	ldi	r27, 0x00	; 0
     750:	e5 e3       	ldi	r30, 0x35	; 53
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	80 81       	ld	r24, Z
     756:	8e 7f       	andi	r24, 0xFE	; 254
     758:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     75a:	a5 e3       	ldi	r26, 0x35	; 53
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	e5 e3       	ldi	r30, 0x35	; 53
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	80 81       	ld	r24, Z
     764:	8d 7f       	andi	r24, 0xFD	; 253
     766:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     768:	e5 e3       	ldi	r30, 0x35	; 53
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	80 e3       	ldi	r24, 0x30	; 48
     76e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     770:	a5 e3       	ldi	r26, 0x35	; 53
     772:	b0 e0       	ldi	r27, 0x00	; 0
     774:	e5 e3       	ldi	r30, 0x35	; 53
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	84 60       	ori	r24, 0x04	; 4
     77c:	8c 93       	st	X, r24
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	a0 ea       	ldi	r26, 0xA0	; 160
     784:	b0 e4       	ldi	r27, 0x40	; 64
     786:	8f a3       	std	Y+39, r24	; 0x27
     788:	98 a7       	std	Y+40, r25	; 0x28
     78a:	a9 a7       	std	Y+41, r26	; 0x29
     78c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     78e:	6f a1       	ldd	r22, Y+39	; 0x27
     790:	78 a5       	ldd	r23, Y+40	; 0x28
     792:	89 a5       	ldd	r24, Y+41	; 0x29
     794:	9a a5       	ldd	r25, Y+42	; 0x2a
     796:	26 e6       	ldi	r18, 0x66	; 102
     798:	36 e6       	ldi	r19, 0x66	; 102
     79a:	46 ee       	ldi	r20, 0xE6	; 230
     79c:	54 e4       	ldi	r21, 0x44	; 68
     79e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     7a2:	dc 01       	movw	r26, r24
     7a4:	cb 01       	movw	r24, r22
     7a6:	8b a3       	std	Y+35, r24	; 0x23
     7a8:	9c a3       	std	Y+36, r25	; 0x24
     7aa:	ad a3       	std	Y+37, r26	; 0x25
     7ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     7ae:	6b a1       	ldd	r22, Y+35	; 0x23
     7b0:	7c a1       	ldd	r23, Y+36	; 0x24
     7b2:	8d a1       	ldd	r24, Y+37	; 0x25
     7b4:	9e a1       	ldd	r25, Y+38	; 0x26
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e8       	ldi	r20, 0x80	; 128
     7bc:	5f e3       	ldi	r21, 0x3F	; 63
     7be:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__ltsf2>
     7c2:	88 23       	and	r24, r24
     7c4:	2c f4       	brge	.+10     	; 0x7d0 <__stack+0x371>
		__ticks = 1;
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	9a a3       	std	Y+34, r25	; 0x22
     7cc:	89 a3       	std	Y+33, r24	; 0x21
     7ce:	3f c0       	rjmp	.+126    	; 0x84e <__stack+0x3ef>
	else if (__tmp > 65535)
     7d0:	6b a1       	ldd	r22, Y+35	; 0x23
     7d2:	7c a1       	ldd	r23, Y+36	; 0x24
     7d4:	8d a1       	ldd	r24, Y+37	; 0x25
     7d6:	9e a1       	ldd	r25, Y+38	; 0x26
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	3f ef       	ldi	r19, 0xFF	; 255
     7dc:	4f e7       	ldi	r20, 0x7F	; 127
     7de:	57 e4       	ldi	r21, 0x47	; 71
     7e0:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__gtsf2>
     7e4:	18 16       	cp	r1, r24
     7e6:	4c f5       	brge	.+82     	; 0x83a <__stack+0x3db>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7e8:	6f a1       	ldd	r22, Y+39	; 0x27
     7ea:	78 a5       	ldd	r23, Y+40	; 0x28
     7ec:	89 a5       	ldd	r24, Y+41	; 0x29
     7ee:	9a a5       	ldd	r25, Y+42	; 0x2a
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	40 e2       	ldi	r20, 0x20	; 32
     7f6:	51 e4       	ldi	r21, 0x41	; 65
     7f8:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     7fc:	dc 01       	movw	r26, r24
     7fe:	cb 01       	movw	r24, r22
     800:	bc 01       	movw	r22, r24
     802:	cd 01       	movw	r24, r26
     804:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     808:	dc 01       	movw	r26, r24
     80a:	cb 01       	movw	r24, r22
     80c:	9a a3       	std	Y+34, r25	; 0x22
     80e:	89 a3       	std	Y+33, r24	; 0x21
     810:	0f c0       	rjmp	.+30     	; 0x830 <__stack+0x3d1>
     812:	88 eb       	ldi	r24, 0xB8	; 184
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	98 a3       	std	Y+32, r25	; 0x20
     818:	8f 8f       	std	Y+31, r24	; 0x1f
     81a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     81c:	98 a1       	ldd	r25, Y+32	; 0x20
     81e:	01 97       	sbiw	r24, 0x01	; 1
     820:	f1 f7       	brne	.-4      	; 0x81e <__stack+0x3bf>
     822:	98 a3       	std	Y+32, r25	; 0x20
     824:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     826:	89 a1       	ldd	r24, Y+33	; 0x21
     828:	9a a1       	ldd	r25, Y+34	; 0x22
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	9a a3       	std	Y+34, r25	; 0x22
     82e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     830:	89 a1       	ldd	r24, Y+33	; 0x21
     832:	9a a1       	ldd	r25, Y+34	; 0x22
     834:	00 97       	sbiw	r24, 0x00	; 0
     836:	69 f7       	brne	.-38     	; 0x812 <__stack+0x3b3>
     838:	14 c0       	rjmp	.+40     	; 0x862 <__stack+0x403>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     83a:	6b a1       	ldd	r22, Y+35	; 0x23
     83c:	7c a1       	ldd	r23, Y+36	; 0x24
     83e:	8d a1       	ldd	r24, Y+37	; 0x25
     840:	9e a1       	ldd	r25, Y+38	; 0x26
     842:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     846:	dc 01       	movw	r26, r24
     848:	cb 01       	movw	r24, r22
     84a:	9a a3       	std	Y+34, r25	; 0x22
     84c:	89 a3       	std	Y+33, r24	; 0x21
     84e:	89 a1       	ldd	r24, Y+33	; 0x21
     850:	9a a1       	ldd	r25, Y+34	; 0x22
     852:	9e 8f       	std	Y+30, r25	; 0x1e
     854:	8d 8f       	std	Y+29, r24	; 0x1d
     856:	8d 8d       	ldd	r24, Y+29	; 0x1d
     858:	9e 8d       	ldd	r25, Y+30	; 0x1e
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <__stack+0x3fb>
     85e:	9e 8f       	std	Y+30, r25	; 0x1e
     860:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     862:	a5 e3       	ldi	r26, 0x35	; 53
     864:	b0 e0       	ldi	r27, 0x00	; 0
     866:	e5 e3       	ldi	r30, 0x35	; 53
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	80 81       	ld	r24, Z
     86c:	8b 7f       	andi	r24, 0xFB	; 251
     86e:	8c 93       	st	X, r24
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	a0 e8       	ldi	r26, 0x80	; 128
     876:	bf e3       	ldi	r27, 0x3F	; 63
     878:	89 8f       	std	Y+25, r24	; 0x19
     87a:	9a 8f       	std	Y+26, r25	; 0x1a
     87c:	ab 8f       	std	Y+27, r26	; 0x1b
     87e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     880:	69 8d       	ldd	r22, Y+25	; 0x19
     882:	7a 8d       	ldd	r23, Y+26	; 0x1a
     884:	8b 8d       	ldd	r24, Y+27	; 0x1b
     886:	9c 8d       	ldd	r25, Y+28	; 0x1c
     888:	26 e6       	ldi	r18, 0x66	; 102
     88a:	36 e6       	ldi	r19, 0x66	; 102
     88c:	46 ee       	ldi	r20, 0xE6	; 230
     88e:	54 e4       	ldi	r21, 0x44	; 68
     890:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	8d 8b       	std	Y+21, r24	; 0x15
     89a:	9e 8b       	std	Y+22, r25	; 0x16
     89c:	af 8b       	std	Y+23, r26	; 0x17
     89e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     8a0:	6d 89       	ldd	r22, Y+21	; 0x15
     8a2:	7e 89       	ldd	r23, Y+22	; 0x16
     8a4:	8f 89       	ldd	r24, Y+23	; 0x17
     8a6:	98 8d       	ldd	r25, Y+24	; 0x18
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	40 e8       	ldi	r20, 0x80	; 128
     8ae:	5f e3       	ldi	r21, 0x3F	; 63
     8b0:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__ltsf2>
     8b4:	88 23       	and	r24, r24
     8b6:	2c f4       	brge	.+10     	; 0x8c2 <__stack+0x463>
		__ticks = 1;
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	9c 8b       	std	Y+20, r25	; 0x14
     8be:	8b 8b       	std	Y+19, r24	; 0x13
     8c0:	3f c0       	rjmp	.+126    	; 0x940 <__stack+0x4e1>
	else if (__tmp > 65535)
     8c2:	6d 89       	ldd	r22, Y+21	; 0x15
     8c4:	7e 89       	ldd	r23, Y+22	; 0x16
     8c6:	8f 89       	ldd	r24, Y+23	; 0x17
     8c8:	98 8d       	ldd	r25, Y+24	; 0x18
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	3f ef       	ldi	r19, 0xFF	; 255
     8ce:	4f e7       	ldi	r20, 0x7F	; 127
     8d0:	57 e4       	ldi	r21, 0x47	; 71
     8d2:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__gtsf2>
     8d6:	18 16       	cp	r1, r24
     8d8:	4c f5       	brge	.+82     	; 0x92c <__stack+0x4cd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8da:	69 8d       	ldd	r22, Y+25	; 0x19
     8dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8de:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	40 e2       	ldi	r20, 0x20	; 32
     8e8:	51 e4       	ldi	r21, 0x41	; 65
     8ea:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     8ee:	dc 01       	movw	r26, r24
     8f0:	cb 01       	movw	r24, r22
     8f2:	bc 01       	movw	r22, r24
     8f4:	cd 01       	movw	r24, r26
     8f6:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     8fa:	dc 01       	movw	r26, r24
     8fc:	cb 01       	movw	r24, r22
     8fe:	9c 8b       	std	Y+20, r25	; 0x14
     900:	8b 8b       	std	Y+19, r24	; 0x13
     902:	0f c0       	rjmp	.+30     	; 0x922 <__stack+0x4c3>
     904:	88 eb       	ldi	r24, 0xB8	; 184
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	9a 8b       	std	Y+18, r25	; 0x12
     90a:	89 8b       	std	Y+17, r24	; 0x11
     90c:	89 89       	ldd	r24, Y+17	; 0x11
     90e:	9a 89       	ldd	r25, Y+18	; 0x12
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	f1 f7       	brne	.-4      	; 0x910 <__stack+0x4b1>
     914:	9a 8b       	std	Y+18, r25	; 0x12
     916:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     918:	8b 89       	ldd	r24, Y+19	; 0x13
     91a:	9c 89       	ldd	r25, Y+20	; 0x14
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	9c 8b       	std	Y+20, r25	; 0x14
     920:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     922:	8b 89       	ldd	r24, Y+19	; 0x13
     924:	9c 89       	ldd	r25, Y+20	; 0x14
     926:	00 97       	sbiw	r24, 0x00	; 0
     928:	69 f7       	brne	.-38     	; 0x904 <__stack+0x4a5>
     92a:	14 c0       	rjmp	.+40     	; 0x954 <__stack+0x4f5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     92c:	6d 89       	ldd	r22, Y+21	; 0x15
     92e:	7e 89       	ldd	r23, Y+22	; 0x16
     930:	8f 89       	ldd	r24, Y+23	; 0x17
     932:	98 8d       	ldd	r25, Y+24	; 0x18
     934:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     938:	dc 01       	movw	r26, r24
     93a:	cb 01       	movw	r24, r22
     93c:	9c 8b       	std	Y+20, r25	; 0x14
     93e:	8b 8b       	std	Y+19, r24	; 0x13
     940:	8b 89       	ldd	r24, Y+19	; 0x13
     942:	9c 89       	ldd	r25, Y+20	; 0x14
     944:	98 8b       	std	Y+16, r25	; 0x10
     946:	8f 87       	std	Y+15, r24	; 0x0f
     948:	8f 85       	ldd	r24, Y+15	; 0x0f
     94a:	98 89       	ldd	r25, Y+16	; 0x10
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <__stack+0x4ed>
     950:	98 8b       	std	Y+16, r25	; 0x10
     952:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     954:	a5 e3       	ldi	r26, 0x35	; 53
     956:	b0 e0       	ldi	r27, 0x00	; 0
     958:	e5 e3       	ldi	r30, 0x35	; 53
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	80 81       	ld	r24, Z
     95e:	8e 7f       	andi	r24, 0xFE	; 254
     960:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     962:	a5 e3       	ldi	r26, 0x35	; 53
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e5 e3       	ldi	r30, 0x35	; 53
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 81       	ld	r24, Z
     96c:	8d 7f       	andi	r24, 0xFD	; 253
     96e:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
     970:	e5 e3       	ldi	r30, 0x35	; 53
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 e2       	ldi	r24, 0x20	; 32
     976:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     978:	a5 e3       	ldi	r26, 0x35	; 53
     97a:	b0 e0       	ldi	r27, 0x00	; 0
     97c:	e5 e3       	ldi	r30, 0x35	; 53
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	84 60       	ori	r24, 0x04	; 4
     984:	8c 93       	st	X, r24
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	a0 ea       	ldi	r26, 0xA0	; 160
     98c:	b0 e4       	ldi	r27, 0x40	; 64
     98e:	8b 87       	std	Y+11, r24	; 0x0b
     990:	9c 87       	std	Y+12, r25	; 0x0c
     992:	ad 87       	std	Y+13, r26	; 0x0d
     994:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     996:	6b 85       	ldd	r22, Y+11	; 0x0b
     998:	7c 85       	ldd	r23, Y+12	; 0x0c
     99a:	8d 85       	ldd	r24, Y+13	; 0x0d
     99c:	9e 85       	ldd	r25, Y+14	; 0x0e
     99e:	26 e6       	ldi	r18, 0x66	; 102
     9a0:	36 e6       	ldi	r19, 0x66	; 102
     9a2:	46 ee       	ldi	r20, 0xE6	; 230
     9a4:	54 e4       	ldi	r21, 0x44	; 68
     9a6:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	8f 83       	std	Y+7, r24	; 0x07
     9b0:	98 87       	std	Y+8, r25	; 0x08
     9b2:	a9 87       	std	Y+9, r26	; 0x09
     9b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     9b6:	6f 81       	ldd	r22, Y+7	; 0x07
     9b8:	78 85       	ldd	r23, Y+8	; 0x08
     9ba:	89 85       	ldd	r24, Y+9	; 0x09
     9bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e8       	ldi	r20, 0x80	; 128
     9c4:	5f e3       	ldi	r21, 0x3F	; 63
     9c6:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__ltsf2>
     9ca:	88 23       	and	r24, r24
     9cc:	2c f4       	brge	.+10     	; 0x9d8 <__stack+0x579>
		__ticks = 1;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	9e 83       	std	Y+6, r25	; 0x06
     9d4:	8d 83       	std	Y+5, r24	; 0x05
     9d6:	3f c0       	rjmp	.+126    	; 0xa56 <__stack+0x5f7>
	else if (__tmp > 65535)
     9d8:	6f 81       	ldd	r22, Y+7	; 0x07
     9da:	78 85       	ldd	r23, Y+8	; 0x08
     9dc:	89 85       	ldd	r24, Y+9	; 0x09
     9de:	9a 85       	ldd	r25, Y+10	; 0x0a
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f e7       	ldi	r20, 0x7F	; 127
     9e6:	57 e4       	ldi	r21, 0x47	; 71
     9e8:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__gtsf2>
     9ec:	18 16       	cp	r1, r24
     9ee:	4c f5       	brge	.+82     	; 0xa42 <__stack+0x5e3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9f0:	6b 85       	ldd	r22, Y+11	; 0x0b
     9f2:	7c 85       	ldd	r23, Y+12	; 0x0c
     9f4:	8d 85       	ldd	r24, Y+13	; 0x0d
     9f6:	9e 85       	ldd	r25, Y+14	; 0x0e
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	40 e2       	ldi	r20, 0x20	; 32
     9fe:	51 e4       	ldi	r21, 0x41	; 65
     a00:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     a04:	dc 01       	movw	r26, r24
     a06:	cb 01       	movw	r24, r22
     a08:	bc 01       	movw	r22, r24
     a0a:	cd 01       	movw	r24, r26
     a0c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     a10:	dc 01       	movw	r26, r24
     a12:	cb 01       	movw	r24, r22
     a14:	9e 83       	std	Y+6, r25	; 0x06
     a16:	8d 83       	std	Y+5, r24	; 0x05
     a18:	0f c0       	rjmp	.+30     	; 0xa38 <__stack+0x5d9>
     a1a:	88 eb       	ldi	r24, 0xB8	; 184
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	9c 83       	std	Y+4, r25	; 0x04
     a20:	8b 83       	std	Y+3, r24	; 0x03
     a22:	8b 81       	ldd	r24, Y+3	; 0x03
     a24:	9c 81       	ldd	r25, Y+4	; 0x04
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	f1 f7       	brne	.-4      	; 0xa26 <__stack+0x5c7>
     a2a:	9c 83       	std	Y+4, r25	; 0x04
     a2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a2e:	8d 81       	ldd	r24, Y+5	; 0x05
     a30:	9e 81       	ldd	r25, Y+6	; 0x06
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	9e 83       	std	Y+6, r25	; 0x06
     a36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a38:	8d 81       	ldd	r24, Y+5	; 0x05
     a3a:	9e 81       	ldd	r25, Y+6	; 0x06
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	69 f7       	brne	.-38     	; 0xa1a <__stack+0x5bb>
     a40:	14 c0       	rjmp	.+40     	; 0xa6a <__stack+0x60b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a42:	6f 81       	ldd	r22, Y+7	; 0x07
     a44:	78 85       	ldd	r23, Y+8	; 0x08
     a46:	89 85       	ldd	r24, Y+9	; 0x09
     a48:	9a 85       	ldd	r25, Y+10	; 0x0a
     a4a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     a4e:	dc 01       	movw	r26, r24
     a50:	cb 01       	movw	r24, r22
     a52:	9e 83       	std	Y+6, r25	; 0x06
     a54:	8d 83       	std	Y+5, r24	; 0x05
     a56:	8d 81       	ldd	r24, Y+5	; 0x05
     a58:	9e 81       	ldd	r25, Y+6	; 0x06
     a5a:	9a 83       	std	Y+2, r25	; 0x02
     a5c:	89 83       	std	Y+1, r24	; 0x01
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	9a 81       	ldd	r25, Y+2	; 0x02
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	f1 f7       	brne	.-4      	; 0xa62 <__stack+0x603>
     a66:	9a 83       	std	Y+2, r25	; 0x02
     a68:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     a6a:	a5 e3       	ldi	r26, 0x35	; 53
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	e5 e3       	ldi	r30, 0x35	; 53
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	8b 7f       	andi	r24, 0xFB	; 251
     a76:	8c 93       	st	X, r24
}
     a78:	c0 59       	subi	r28, 0x90	; 144
     a7a:	df 4f       	sbci	r29, 0xFF	; 255
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	cf 91       	pop	r28
     a88:	df 91       	pop	r29
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	08 95       	ret

00000a90 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     a90:	df 93       	push	r29
     a92:	cf 93       	push	r28
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	2e 97       	sbiw	r28, 0x0e	; 14
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a0 e8       	ldi	r26, 0x80	; 128
     aaa:	bf e3       	ldi	r27, 0x3F	; 63
     aac:	8b 87       	std	Y+11, r24	; 0x0b
     aae:	9c 87       	std	Y+12, r25	; 0x0c
     ab0:	ad 87       	std	Y+13, r26	; 0x0d
     ab2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
     aba:	9e 85       	ldd	r25, Y+14	; 0x0e
     abc:	26 e6       	ldi	r18, 0x66	; 102
     abe:	36 e6       	ldi	r19, 0x66	; 102
     ac0:	46 ee       	ldi	r20, 0xE6	; 230
     ac2:	54 e4       	ldi	r21, 0x44	; 68
     ac4:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     ac8:	dc 01       	movw	r26, r24
     aca:	cb 01       	movw	r24, r22
     acc:	8f 83       	std	Y+7, r24	; 0x07
     ace:	98 87       	std	Y+8, r25	; 0x08
     ad0:	a9 87       	std	Y+9, r26	; 0x09
     ad2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ad4:	6f 81       	ldd	r22, Y+7	; 0x07
     ad6:	78 85       	ldd	r23, Y+8	; 0x08
     ad8:	89 85       	ldd	r24, Y+9	; 0x09
     ada:	9a 85       	ldd	r25, Y+10	; 0x0a
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	40 e8       	ldi	r20, 0x80	; 128
     ae2:	5f e3       	ldi	r21, 0x3F	; 63
     ae4:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__ltsf2>
     ae8:	88 23       	and	r24, r24
     aea:	2c f4       	brge	.+10     	; 0xaf6 <lcd_init+0x66>
		__ticks = 1;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	9e 83       	std	Y+6, r25	; 0x06
     af2:	8d 83       	std	Y+5, r24	; 0x05
     af4:	3f c0       	rjmp	.+126    	; 0xb74 <lcd_init+0xe4>
	else if (__tmp > 65535)
     af6:	6f 81       	ldd	r22, Y+7	; 0x07
     af8:	78 85       	ldd	r23, Y+8	; 0x08
     afa:	89 85       	ldd	r24, Y+9	; 0x09
     afc:	9a 85       	ldd	r25, Y+10	; 0x0a
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	3f ef       	ldi	r19, 0xFF	; 255
     b02:	4f e7       	ldi	r20, 0x7F	; 127
     b04:	57 e4       	ldi	r21, 0x47	; 71
     b06:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__gtsf2>
     b0a:	18 16       	cp	r1, r24
     b0c:	4c f5       	brge	.+82     	; 0xb60 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     b10:	7c 85       	ldd	r23, Y+12	; 0x0c
     b12:	8d 85       	ldd	r24, Y+13	; 0x0d
     b14:	9e 85       	ldd	r25, Y+14	; 0x0e
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e2       	ldi	r20, 0x20	; 32
     b1c:	51 e4       	ldi	r21, 0x41	; 65
     b1e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     b22:	dc 01       	movw	r26, r24
     b24:	cb 01       	movw	r24, r22
     b26:	bc 01       	movw	r22, r24
     b28:	cd 01       	movw	r24, r26
     b2a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     b2e:	dc 01       	movw	r26, r24
     b30:	cb 01       	movw	r24, r22
     b32:	9e 83       	std	Y+6, r25	; 0x06
     b34:	8d 83       	std	Y+5, r24	; 0x05
     b36:	0f c0       	rjmp	.+30     	; 0xb56 <lcd_init+0xc6>
     b38:	88 eb       	ldi	r24, 0xB8	; 184
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	9c 83       	std	Y+4, r25	; 0x04
     b3e:	8b 83       	std	Y+3, r24	; 0x03
     b40:	8b 81       	ldd	r24, Y+3	; 0x03
     b42:	9c 81       	ldd	r25, Y+4	; 0x04
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <lcd_init+0xb4>
     b48:	9c 83       	std	Y+4, r25	; 0x04
     b4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b4c:	8d 81       	ldd	r24, Y+5	; 0x05
     b4e:	9e 81       	ldd	r25, Y+6	; 0x06
     b50:	01 97       	sbiw	r24, 0x01	; 1
     b52:	9e 83       	std	Y+6, r25	; 0x06
     b54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b56:	8d 81       	ldd	r24, Y+5	; 0x05
     b58:	9e 81       	ldd	r25, Y+6	; 0x06
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	69 f7       	brne	.-38     	; 0xb38 <lcd_init+0xa8>
     b5e:	14 c0       	rjmp	.+40     	; 0xb88 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b60:	6f 81       	ldd	r22, Y+7	; 0x07
     b62:	78 85       	ldd	r23, Y+8	; 0x08
     b64:	89 85       	ldd	r24, Y+9	; 0x09
     b66:	9a 85       	ldd	r25, Y+10	; 0x0a
     b68:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     b6c:	dc 01       	movw	r26, r24
     b6e:	cb 01       	movw	r24, r22
     b70:	9e 83       	std	Y+6, r25	; 0x06
     b72:	8d 83       	std	Y+5, r24	; 0x05
     b74:	8d 81       	ldd	r24, Y+5	; 0x05
     b76:	9e 81       	ldd	r25, Y+6	; 0x06
     b78:	9a 83       	std	Y+2, r25	; 0x02
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	9a 81       	ldd	r25, Y+2	; 0x02
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	f1 f7       	brne	.-4      	; 0xb80 <lcd_init+0xf0>
     b84:	9a 83       	std	Y+2, r25	; 0x02
     b86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     b88:	88 e2       	ldi	r24, 0x28	; 40
     b8a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     b94:	86 e0       	ldi	r24, 0x06	; 6
     b96:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     b9a:	8e e0       	ldi	r24, 0x0E	; 14
     b9c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     ba0:	80 e8       	ldi	r24, 0x80	; 128
     ba2:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <lcd_wr_command>
}
     ba6:	2e 96       	adiw	r28, 0x0e	; 14
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <lcd_wr_command>:

	 
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	6e 97       	sbiw	r28, 0x1e	; 30
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     bce:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bd0:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     bd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bd4:	80 7f       	andi	r24, 0xF0	; 240
     bd6:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     bd8:	a5 e3       	ldi	r26, 0x35	; 53
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e5 e3       	ldi	r30, 0x35	; 53
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	8f 70       	andi	r24, 0x0F	; 15
     be4:	8c 93       	st	X, r24
	lcd_port |= temp;
     be6:	a5 e3       	ldi	r26, 0x35	; 53
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e5 e3       	ldi	r30, 0x35	; 53
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	90 81       	ld	r25, Z
     bf0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bf2:	89 2b       	or	r24, r25
     bf4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     bf6:	a5 e3       	ldi	r26, 0x35	; 53
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e5 e3       	ldi	r30, 0x35	; 53
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8e 7f       	andi	r24, 0xFE	; 254
     c02:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     c04:	a5 e3       	ldi	r26, 0x35	; 53
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e5 e3       	ldi	r30, 0x35	; 53
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8d 7f       	andi	r24, 0xFD	; 253
     c10:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     c12:	a5 e3       	ldi	r26, 0x35	; 53
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e5 e3       	ldi	r30, 0x35	; 53
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	84 60       	ori	r24, 0x04	; 4
     c1e:	8c 93       	st	X, r24
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	a0 ea       	ldi	r26, 0xA0	; 160
     c26:	b0 e4       	ldi	r27, 0x40	; 64
     c28:	89 8f       	std	Y+25, r24	; 0x19
     c2a:	9a 8f       	std	Y+26, r25	; 0x1a
     c2c:	ab 8f       	std	Y+27, r26	; 0x1b
     c2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c30:	69 8d       	ldd	r22, Y+25	; 0x19
     c32:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c34:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c36:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c38:	26 e6       	ldi	r18, 0x66	; 102
     c3a:	36 e6       	ldi	r19, 0x66	; 102
     c3c:	46 ee       	ldi	r20, 0xE6	; 230
     c3e:	54 e4       	ldi	r21, 0x44	; 68
     c40:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	8d 8b       	std	Y+21, r24	; 0x15
     c4a:	9e 8b       	std	Y+22, r25	; 0x16
     c4c:	af 8b       	std	Y+23, r26	; 0x17
     c4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c50:	6d 89       	ldd	r22, Y+21	; 0x15
     c52:	7e 89       	ldd	r23, Y+22	; 0x16
     c54:	8f 89       	ldd	r24, Y+23	; 0x17
     c56:	98 8d       	ldd	r25, Y+24	; 0x18
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	40 e8       	ldi	r20, 0x80	; 128
     c5e:	5f e3       	ldi	r21, 0x3F	; 63
     c60:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__ltsf2>
     c64:	88 23       	and	r24, r24
     c66:	2c f4       	brge	.+10     	; 0xc72 <lcd_wr_command+0xba>
		__ticks = 1;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	9c 8b       	std	Y+20, r25	; 0x14
     c6e:	8b 8b       	std	Y+19, r24	; 0x13
     c70:	3f c0       	rjmp	.+126    	; 0xcf0 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     c72:	6d 89       	ldd	r22, Y+21	; 0x15
     c74:	7e 89       	ldd	r23, Y+22	; 0x16
     c76:	8f 89       	ldd	r24, Y+23	; 0x17
     c78:	98 8d       	ldd	r25, Y+24	; 0x18
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	3f ef       	ldi	r19, 0xFF	; 255
     c7e:	4f e7       	ldi	r20, 0x7F	; 127
     c80:	57 e4       	ldi	r21, 0x47	; 71
     c82:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__gtsf2>
     c86:	18 16       	cp	r1, r24
     c88:	4c f5       	brge	.+82     	; 0xcdc <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c8a:	69 8d       	ldd	r22, Y+25	; 0x19
     c8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c90:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e2       	ldi	r20, 0x20	; 32
     c98:	51 e4       	ldi	r21, 0x41	; 65
     c9a:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	bc 01       	movw	r22, r24
     ca4:	cd 01       	movw	r24, r26
     ca6:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	9c 8b       	std	Y+20, r25	; 0x14
     cb0:	8b 8b       	std	Y+19, r24	; 0x13
     cb2:	0f c0       	rjmp	.+30     	; 0xcd2 <lcd_wr_command+0x11a>
     cb4:	88 eb       	ldi	r24, 0xB8	; 184
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	9a 8b       	std	Y+18, r25	; 0x12
     cba:	89 8b       	std	Y+17, r24	; 0x11
     cbc:	89 89       	ldd	r24, Y+17	; 0x11
     cbe:	9a 89       	ldd	r25, Y+18	; 0x12
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <lcd_wr_command+0x108>
     cc4:	9a 8b       	std	Y+18, r25	; 0x12
     cc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc8:	8b 89       	ldd	r24, Y+19	; 0x13
     cca:	9c 89       	ldd	r25, Y+20	; 0x14
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	9c 8b       	std	Y+20, r25	; 0x14
     cd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd2:	8b 89       	ldd	r24, Y+19	; 0x13
     cd4:	9c 89       	ldd	r25, Y+20	; 0x14
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	69 f7       	brne	.-38     	; 0xcb4 <lcd_wr_command+0xfc>
     cda:	14 c0       	rjmp	.+40     	; 0xd04 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cdc:	6d 89       	ldd	r22, Y+21	; 0x15
     cde:	7e 89       	ldd	r23, Y+22	; 0x16
     ce0:	8f 89       	ldd	r24, Y+23	; 0x17
     ce2:	98 8d       	ldd	r25, Y+24	; 0x18
     ce4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	9c 8b       	std	Y+20, r25	; 0x14
     cee:	8b 8b       	std	Y+19, r24	; 0x13
     cf0:	8b 89       	ldd	r24, Y+19	; 0x13
     cf2:	9c 89       	ldd	r25, Y+20	; 0x14
     cf4:	98 8b       	std	Y+16, r25	; 0x10
     cf6:	8f 87       	std	Y+15, r24	; 0x0f
     cf8:	8f 85       	ldd	r24, Y+15	; 0x0f
     cfa:	98 89       	ldd	r25, Y+16	; 0x10
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	f1 f7       	brne	.-4      	; 0xcfc <lcd_wr_command+0x144>
     d00:	98 8b       	std	Y+16, r25	; 0x10
     d02:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     d04:	a5 e3       	ldi	r26, 0x35	; 53
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e5 e3       	ldi	r30, 0x35	; 53
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	8b 7f       	andi	r24, 0xFB	; 251
     d10:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     d12:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d14:	8f 70       	andi	r24, 0x0F	; 15
     d16:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     d18:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d1a:	82 95       	swap	r24
     d1c:	80 7f       	andi	r24, 0xF0	; 240
     d1e:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     d20:	a5 e3       	ldi	r26, 0x35	; 53
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e5 e3       	ldi	r30, 0x35	; 53
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	8f 70       	andi	r24, 0x0F	; 15
     d2c:	8c 93       	st	X, r24
	lcd_port |= cmd;
     d2e:	a5 e3       	ldi	r26, 0x35	; 53
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e5 e3       	ldi	r30, 0x35	; 53
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	90 81       	ld	r25, Z
     d38:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d3a:	89 2b       	or	r24, r25
     d3c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     d3e:	a5 e3       	ldi	r26, 0x35	; 53
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e5 e3       	ldi	r30, 0x35	; 53
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	8e 7f       	andi	r24, 0xFE	; 254
     d4a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     d4c:	a5 e3       	ldi	r26, 0x35	; 53
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e5 e3       	ldi	r30, 0x35	; 53
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	8d 7f       	andi	r24, 0xFD	; 253
     d58:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     d5a:	a5 e3       	ldi	r26, 0x35	; 53
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e5 e3       	ldi	r30, 0x35	; 53
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	84 60       	ori	r24, 0x04	; 4
     d66:	8c 93       	st	X, r24
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	a0 ea       	ldi	r26, 0xA0	; 160
     d6e:	b0 e4       	ldi	r27, 0x40	; 64
     d70:	8b 87       	std	Y+11, r24	; 0x0b
     d72:	9c 87       	std	Y+12, r25	; 0x0c
     d74:	ad 87       	std	Y+13, r26	; 0x0d
     d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d78:	6b 85       	ldd	r22, Y+11	; 0x0b
     d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d80:	26 e6       	ldi	r18, 0x66	; 102
     d82:	36 e6       	ldi	r19, 0x66	; 102
     d84:	46 ee       	ldi	r20, 0xE6	; 230
     d86:	54 e4       	ldi	r21, 0x44	; 68
     d88:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	8f 83       	std	Y+7, r24	; 0x07
     d92:	98 87       	std	Y+8, r25	; 0x08
     d94:	a9 87       	std	Y+9, r26	; 0x09
     d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d98:	6f 81       	ldd	r22, Y+7	; 0x07
     d9a:	78 85       	ldd	r23, Y+8	; 0x08
     d9c:	89 85       	ldd	r24, Y+9	; 0x09
     d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 e8       	ldi	r20, 0x80	; 128
     da6:	5f e3       	ldi	r21, 0x3F	; 63
     da8:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__ltsf2>
     dac:	88 23       	and	r24, r24
     dae:	2c f4       	brge	.+10     	; 0xdba <lcd_wr_command+0x202>
		__ticks = 1;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	9e 83       	std	Y+6, r25	; 0x06
     db6:	8d 83       	std	Y+5, r24	; 0x05
     db8:	3f c0       	rjmp	.+126    	; 0xe38 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     dba:	6f 81       	ldd	r22, Y+7	; 0x07
     dbc:	78 85       	ldd	r23, Y+8	; 0x08
     dbe:	89 85       	ldd	r24, Y+9	; 0x09
     dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	3f ef       	ldi	r19, 0xFF	; 255
     dc6:	4f e7       	ldi	r20, 0x7F	; 127
     dc8:	57 e4       	ldi	r21, 0x47	; 71
     dca:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__gtsf2>
     dce:	18 16       	cp	r1, r24
     dd0:	4c f5       	brge	.+82     	; 0xe24 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e2       	ldi	r20, 0x20	; 32
     de0:	51 e4       	ldi	r21, 0x41	; 65
     de2:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	bc 01       	movw	r22, r24
     dec:	cd 01       	movw	r24, r26
     dee:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	9e 83       	std	Y+6, r25	; 0x06
     df8:	8d 83       	std	Y+5, r24	; 0x05
     dfa:	0f c0       	rjmp	.+30     	; 0xe1a <lcd_wr_command+0x262>
     dfc:	88 eb       	ldi	r24, 0xB8	; 184
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9c 83       	std	Y+4, r25	; 0x04
     e02:	8b 83       	std	Y+3, r24	; 0x03
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	9c 81       	ldd	r25, Y+4	; 0x04
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <lcd_wr_command+0x250>
     e0c:	9c 83       	std	Y+4, r25	; 0x04
     e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
     e12:	9e 81       	ldd	r25, Y+6	; 0x06
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	9e 83       	std	Y+6, r25	; 0x06
     e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e1a:	8d 81       	ldd	r24, Y+5	; 0x05
     e1c:	9e 81       	ldd	r25, Y+6	; 0x06
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	69 f7       	brne	.-38     	; 0xdfc <lcd_wr_command+0x244>
     e22:	14 c0       	rjmp	.+40     	; 0xe4c <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e24:	6f 81       	ldd	r22, Y+7	; 0x07
     e26:	78 85       	ldd	r23, Y+8	; 0x08
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	9e 83       	std	Y+6, r25	; 0x06
     e36:	8d 83       	std	Y+5, r24	; 0x05
     e38:	8d 81       	ldd	r24, Y+5	; 0x05
     e3a:	9e 81       	ldd	r25, Y+6	; 0x06
     e3c:	9a 83       	std	Y+2, r25	; 0x02
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	9a 81       	ldd	r25, Y+2	; 0x02
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <lcd_wr_command+0x28c>
     e48:	9a 83       	std	Y+2, r25	; 0x02
     e4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     e4c:	a5 e3       	ldi	r26, 0x35	; 53
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e5 e3       	ldi	r30, 0x35	; 53
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	8b 7f       	andi	r24, 0xFB	; 251
     e58:	8c 93       	st	X, r24
}
     e5a:	6e 96       	adiw	r28, 0x1e	; 30
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <lcd_wr_char>:

//Function to write data on LCD
void lcd_wr_char(char letter)
{
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	6e 97       	sbiw	r28, 0x1e	; 30
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     e82:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e84:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     e86:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e88:	80 7f       	andi	r24, 0xF0	; 240
     e8a:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     e8c:	a5 e3       	ldi	r26, 0x35	; 53
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e3       	ldi	r30, 0x35	; 53
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	8f 70       	andi	r24, 0x0F	; 15
     e98:	8c 93       	st	X, r24
	lcd_port |= temp;
     e9a:	a5 e3       	ldi	r26, 0x35	; 53
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e5 e3       	ldi	r30, 0x35	; 53
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	90 81       	ld	r25, Z
     ea4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ea6:	89 2b       	or	r24, r25
     ea8:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     eaa:	a5 e3       	ldi	r26, 0x35	; 53
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e5 e3       	ldi	r30, 0x35	; 53
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	81 60       	ori	r24, 0x01	; 1
     eb6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     eb8:	a5 e3       	ldi	r26, 0x35	; 53
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e5 e3       	ldi	r30, 0x35	; 53
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8d 7f       	andi	r24, 0xFD	; 253
     ec4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     ec6:	a5 e3       	ldi	r26, 0x35	; 53
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e5 e3       	ldi	r30, 0x35	; 53
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	84 60       	ori	r24, 0x04	; 4
     ed2:	8c 93       	st	X, r24
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	a0 ea       	ldi	r26, 0xA0	; 160
     eda:	b0 e4       	ldi	r27, 0x40	; 64
     edc:	89 8f       	std	Y+25, r24	; 0x19
     ede:	9a 8f       	std	Y+26, r25	; 0x1a
     ee0:	ab 8f       	std	Y+27, r26	; 0x1b
     ee2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee4:	69 8d       	ldd	r22, Y+25	; 0x19
     ee6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ee8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eec:	26 e6       	ldi	r18, 0x66	; 102
     eee:	36 e6       	ldi	r19, 0x66	; 102
     ef0:	46 ee       	ldi	r20, 0xE6	; 230
     ef2:	54 e4       	ldi	r21, 0x44	; 68
     ef4:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	8d 8b       	std	Y+21, r24	; 0x15
     efe:	9e 8b       	std	Y+22, r25	; 0x16
     f00:	af 8b       	std	Y+23, r26	; 0x17
     f02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f04:	6d 89       	ldd	r22, Y+21	; 0x15
     f06:	7e 89       	ldd	r23, Y+22	; 0x16
     f08:	8f 89       	ldd	r24, Y+23	; 0x17
     f0a:	98 8d       	ldd	r25, Y+24	; 0x18
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e8       	ldi	r20, 0x80	; 128
     f12:	5f e3       	ldi	r21, 0x3F	; 63
     f14:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__ltsf2>
     f18:	88 23       	and	r24, r24
     f1a:	2c f4       	brge	.+10     	; 0xf26 <lcd_wr_char+0xba>
		__ticks = 1;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	9c 8b       	std	Y+20, r25	; 0x14
     f22:	8b 8b       	std	Y+19, r24	; 0x13
     f24:	3f c0       	rjmp	.+126    	; 0xfa4 <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     f26:	6d 89       	ldd	r22, Y+21	; 0x15
     f28:	7e 89       	ldd	r23, Y+22	; 0x16
     f2a:	8f 89       	ldd	r24, Y+23	; 0x17
     f2c:	98 8d       	ldd	r25, Y+24	; 0x18
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	3f ef       	ldi	r19, 0xFF	; 255
     f32:	4f e7       	ldi	r20, 0x7F	; 127
     f34:	57 e4       	ldi	r21, 0x47	; 71
     f36:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__gtsf2>
     f3a:	18 16       	cp	r1, r24
     f3c:	4c f5       	brge	.+82     	; 0xf90 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3e:	69 8d       	ldd	r22, Y+25	; 0x19
     f40:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f42:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f44:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e2       	ldi	r20, 0x20	; 32
     f4c:	51 e4       	ldi	r21, 0x41	; 65
     f4e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	bc 01       	movw	r22, r24
     f58:	cd 01       	movw	r24, r26
     f5a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	9c 8b       	std	Y+20, r25	; 0x14
     f64:	8b 8b       	std	Y+19, r24	; 0x13
     f66:	0f c0       	rjmp	.+30     	; 0xf86 <lcd_wr_char+0x11a>
     f68:	88 eb       	ldi	r24, 0xB8	; 184
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	9a 8b       	std	Y+18, r25	; 0x12
     f6e:	89 8b       	std	Y+17, r24	; 0x11
     f70:	89 89       	ldd	r24, Y+17	; 0x11
     f72:	9a 89       	ldd	r25, Y+18	; 0x12
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	f1 f7       	brne	.-4      	; 0xf74 <lcd_wr_char+0x108>
     f78:	9a 8b       	std	Y+18, r25	; 0x12
     f7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7c:	8b 89       	ldd	r24, Y+19	; 0x13
     f7e:	9c 89       	ldd	r25, Y+20	; 0x14
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	9c 8b       	std	Y+20, r25	; 0x14
     f84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f86:	8b 89       	ldd	r24, Y+19	; 0x13
     f88:	9c 89       	ldd	r25, Y+20	; 0x14
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	69 f7       	brne	.-38     	; 0xf68 <lcd_wr_char+0xfc>
     f8e:	14 c0       	rjmp	.+40     	; 0xfb8 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f90:	6d 89       	ldd	r22, Y+21	; 0x15
     f92:	7e 89       	ldd	r23, Y+22	; 0x16
     f94:	8f 89       	ldd	r24, Y+23	; 0x17
     f96:	98 8d       	ldd	r25, Y+24	; 0x18
     f98:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	9c 8b       	std	Y+20, r25	; 0x14
     fa2:	8b 8b       	std	Y+19, r24	; 0x13
     fa4:	8b 89       	ldd	r24, Y+19	; 0x13
     fa6:	9c 89       	ldd	r25, Y+20	; 0x14
     fa8:	98 8b       	std	Y+16, r25	; 0x10
     faa:	8f 87       	std	Y+15, r24	; 0x0f
     fac:	8f 85       	ldd	r24, Y+15	; 0x0f
     fae:	98 89       	ldd	r25, Y+16	; 0x10
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <lcd_wr_char+0x144>
     fb4:	98 8b       	std	Y+16, r25	; 0x10
     fb6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     fb8:	a5 e3       	ldi	r26, 0x35	; 53
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e5 e3       	ldi	r30, 0x35	; 53
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8b 7f       	andi	r24, 0xFB	; 251
     fc4:	8c 93       	st	X, r24

	letter = letter & 0x0F;
     fc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fc8:	8f 70       	andi	r24, 0x0F	; 15
     fca:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
     fcc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fce:	82 95       	swap	r24
     fd0:	80 7f       	andi	r24, 0xF0	; 240
     fd2:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     fd4:	a5 e3       	ldi	r26, 0x35	; 53
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e5 e3       	ldi	r30, 0x35	; 53
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8f 70       	andi	r24, 0x0F	; 15
     fe0:	8c 93       	st	X, r24
	lcd_port |= letter;
     fe2:	a5 e3       	ldi	r26, 0x35	; 53
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e5 e3       	ldi	r30, 0x35	; 53
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	90 81       	ld	r25, Z
     fec:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fee:	89 2b       	or	r24, r25
     ff0:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     ff2:	a5 e3       	ldi	r26, 0x35	; 53
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e5 e3       	ldi	r30, 0x35	; 53
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	81 60       	ori	r24, 0x01	; 1
     ffe:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1000:	a5 e3       	ldi	r26, 0x35	; 53
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e3       	ldi	r30, 0x35	; 53
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8d 7f       	andi	r24, 0xFD	; 253
    100c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    100e:	a5 e3       	ldi	r26, 0x35	; 53
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e5 e3       	ldi	r30, 0x35	; 53
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	84 60       	ori	r24, 0x04	; 4
    101a:	8c 93       	st	X, r24
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	a0 ea       	ldi	r26, 0xA0	; 160
    1022:	b0 e4       	ldi	r27, 0x40	; 64
    1024:	8b 87       	std	Y+11, r24	; 0x0b
    1026:	9c 87       	std	Y+12, r25	; 0x0c
    1028:	ad 87       	std	Y+13, r26	; 0x0d
    102a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    102c:	6b 85       	ldd	r22, Y+11	; 0x0b
    102e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1030:	8d 85       	ldd	r24, Y+13	; 0x0d
    1032:	9e 85       	ldd	r25, Y+14	; 0x0e
    1034:	26 e6       	ldi	r18, 0x66	; 102
    1036:	36 e6       	ldi	r19, 0x66	; 102
    1038:	46 ee       	ldi	r20, 0xE6	; 230
    103a:	54 e4       	ldi	r21, 0x44	; 68
    103c:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	8f 83       	std	Y+7, r24	; 0x07
    1046:	98 87       	std	Y+8, r25	; 0x08
    1048:	a9 87       	std	Y+9, r26	; 0x09
    104a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    104c:	6f 81       	ldd	r22, Y+7	; 0x07
    104e:	78 85       	ldd	r23, Y+8	; 0x08
    1050:	89 85       	ldd	r24, Y+9	; 0x09
    1052:	9a 85       	ldd	r25, Y+10	; 0x0a
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e8       	ldi	r20, 0x80	; 128
    105a:	5f e3       	ldi	r21, 0x3F	; 63
    105c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__ltsf2>
    1060:	88 23       	and	r24, r24
    1062:	2c f4       	brge	.+10     	; 0x106e <lcd_wr_char+0x202>
		__ticks = 1;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
    106c:	3f c0       	rjmp	.+126    	; 0x10ec <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    106e:	6f 81       	ldd	r22, Y+7	; 0x07
    1070:	78 85       	ldd	r23, Y+8	; 0x08
    1072:	89 85       	ldd	r24, Y+9	; 0x09
    1074:	9a 85       	ldd	r25, Y+10	; 0x0a
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	3f ef       	ldi	r19, 0xFF	; 255
    107a:	4f e7       	ldi	r20, 0x7F	; 127
    107c:	57 e4       	ldi	r21, 0x47	; 71
    107e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__gtsf2>
    1082:	18 16       	cp	r1, r24
    1084:	4c f5       	brge	.+82     	; 0x10d8 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1086:	6b 85       	ldd	r22, Y+11	; 0x0b
    1088:	7c 85       	ldd	r23, Y+12	; 0x0c
    108a:	8d 85       	ldd	r24, Y+13	; 0x0d
    108c:	9e 85       	ldd	r25, Y+14	; 0x0e
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e2       	ldi	r20, 0x20	; 32
    1094:	51 e4       	ldi	r21, 0x41	; 65
    1096:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	bc 01       	movw	r22, r24
    10a0:	cd 01       	movw	r24, r26
    10a2:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	8d 83       	std	Y+5, r24	; 0x05
    10ae:	0f c0       	rjmp	.+30     	; 0x10ce <lcd_wr_char+0x262>
    10b0:	88 eb       	ldi	r24, 0xB8	; 184
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9c 83       	std	Y+4, r25	; 0x04
    10b6:	8b 83       	std	Y+3, r24	; 0x03
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	9c 81       	ldd	r25, Y+4	; 0x04
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <lcd_wr_char+0x250>
    10c0:	9c 83       	std	Y+4, r25	; 0x04
    10c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	9e 81       	ldd	r25, Y+6	; 0x06
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	9e 83       	std	Y+6, r25	; 0x06
    10cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ce:	8d 81       	ldd	r24, Y+5	; 0x05
    10d0:	9e 81       	ldd	r25, Y+6	; 0x06
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	69 f7       	brne	.-38     	; 0x10b0 <lcd_wr_char+0x244>
    10d6:	14 c0       	rjmp	.+40     	; 0x1100 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d8:	6f 81       	ldd	r22, Y+7	; 0x07
    10da:	78 85       	ldd	r23, Y+8	; 0x08
    10dc:	89 85       	ldd	r24, Y+9	; 0x09
    10de:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e0:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__fixunssfsi>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	9e 83       	std	Y+6, r25	; 0x06
    10ea:	8d 83       	std	Y+5, r24	; 0x05
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	9e 81       	ldd	r25, Y+6	; 0x06
    10f0:	9a 83       	std	Y+2, r25	; 0x02
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	9a 81       	ldd	r25, Y+2	; 0x02
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <lcd_wr_char+0x28c>
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1100:	a5 e3       	ldi	r26, 0x35	; 53
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e5 e3       	ldi	r30, 0x35	; 53
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	8b 7f       	andi	r24, 0xFB	; 251
    110c:	8c 93       	st	X, r24
}
    110e:	6e 96       	adiw	r28, 0x1e	; 30
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <lcd_home>:


void lcd_home()
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1128:	80 e8       	ldi	r24, 0x80	; 128
    112a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <lcd_wr_command>
}
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <lcd_string+0x6>
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	0a c0       	rjmp	.+20     	; 0x1158 <lcd_string+0x24>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1144:	e9 81       	ldd	r30, Y+1	; 0x01
    1146:	fa 81       	ldd	r31, Y+2	; 0x02
    1148:	80 81       	ld	r24, Z
    114a:	0e 94 36 07 	call	0xe6c	; 0xe6c <lcd_wr_char>
		str++;
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    1158:	e9 81       	ldd	r30, Y+1	; 0x01
    115a:	fa 81       	ldd	r31, Y+2	; 0x02
    115c:	80 81       	ld	r24, Z
    115e:	88 23       	and	r24, r24
    1160:	89 f7       	brne	.-30     	; 0x1144 <lcd_string+0x10>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	00 d0       	rcall	.+0      	; 0x1172 <lcd_cursor+0x6>
    1172:	00 d0       	rcall	.+0      	; 0x1174 <lcd_cursor+0x8>
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	3c 83       	std	Y+4, r19	; 0x04
    1184:	2b 83       	std	Y+3, r18	; 0x03
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	82 30       	cpi	r24, 0x02	; 2
    118c:	91 05       	cpc	r25, r1
    118e:	d9 f0       	breq	.+54     	; 0x11c6 <lcd_cursor+0x5a>
    1190:	2b 81       	ldd	r18, Y+3	; 0x03
    1192:	3c 81       	ldd	r19, Y+4	; 0x04
    1194:	23 30       	cpi	r18, 0x03	; 3
    1196:	31 05       	cpc	r19, r1
    1198:	34 f4       	brge	.+12     	; 0x11a6 <lcd_cursor+0x3a>
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	91 05       	cpc	r25, r1
    11a2:	61 f0       	breq	.+24     	; 0x11bc <lcd_cursor+0x50>
    11a4:	1e c0       	rjmp	.+60     	; 0x11e2 <lcd_cursor+0x76>
    11a6:	2b 81       	ldd	r18, Y+3	; 0x03
    11a8:	3c 81       	ldd	r19, Y+4	; 0x04
    11aa:	23 30       	cpi	r18, 0x03	; 3
    11ac:	31 05       	cpc	r19, r1
    11ae:	81 f0       	breq	.+32     	; 0x11d0 <lcd_cursor+0x64>
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	84 30       	cpi	r24, 0x04	; 4
    11b6:	91 05       	cpc	r25, r1
    11b8:	81 f0       	breq	.+32     	; 0x11da <lcd_cursor+0x6e>
    11ba:	13 c0       	rjmp	.+38     	; 0x11e2 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	81 58       	subi	r24, 0x81	; 129
    11c0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <lcd_wr_command>
    11c4:	0e c0       	rjmp	.+28     	; 0x11e2 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	81 54       	subi	r24, 0x41	; 65
    11ca:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <lcd_wr_command>
    11ce:	09 c0       	rjmp	.+18     	; 0x11e2 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	8d 56       	subi	r24, 0x6D	; 109
    11d4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <lcd_wr_command>
    11d8:	04 c0       	rjmp	.+8      	; 0x11e2 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	8d 52       	subi	r24, 0x2D	; 45
    11de:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <lcd_wr_command>
		default: break;
	}
}
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <lcd_print>:

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	27 97       	sbiw	r28, 0x07	; 7
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	8a 83       	std	Y+2, r24	; 0x02
    1206:	6b 83       	std	Y+3, r22	; 0x03
    1208:	5d 83       	std	Y+5, r21	; 0x05
    120a:	4c 83       	std	Y+4, r20	; 0x04
    120c:	3f 83       	std	Y+7, r19	; 0x07
    120e:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    1210:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	88 23       	and	r24, r24
    1216:	19 f0       	breq	.+6      	; 0x121e <lcd_print+0x2e>
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	88 23       	and	r24, r24
    121c:	19 f4       	brne	.+6      	; 0x1224 <lcd_print+0x34>
	{
		lcd_home();
    121e:	0e 94 90 08 	call	0x1120	; 0x1120 <lcd_home>
    1222:	04 c0       	rjmp	.+8      	; 0x122c <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	6b 81       	ldd	r22, Y+3	; 0x03
    1228:	0e 94 b6 08 	call	0x116c	; 0x116c <lcd_cursor>
	}
	if(digits==5 || flag==1)
    122c:	8e 81       	ldd	r24, Y+6	; 0x06
    122e:	9f 81       	ldd	r25, Y+7	; 0x07
    1230:	85 30       	cpi	r24, 0x05	; 5
    1232:	91 05       	cpc	r25, r1
    1234:	19 f0       	breq	.+6      	; 0x123c <lcd_print+0x4c>
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	a9 f4       	brne	.+42     	; 0x1266 <lcd_print+0x76>
	{
		million=value/10000+48;
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	9d 81       	ldd	r25, Y+5	; 0x05
    1240:	20 e1       	ldi	r18, 0x10	; 16
    1242:	37 e2       	ldi	r19, 0x27	; 39
    1244:	b9 01       	movw	r22, r18
    1246:	0e 94 b3 12 	call	0x2566	; 0x2566 <__udivmodhi4>
    124a:	cb 01       	movw	r24, r22
    124c:	c0 96       	adiw	r24, 0x30	; 48
    124e:	90 93 6d 01 	sts	0x016D, r25
    1252:	80 93 6c 01 	sts	0x016C, r24
		lcd_wr_char(million);
    1256:	80 91 6c 01 	lds	r24, 0x016C
    125a:	90 91 6d 01 	lds	r25, 0x016D
    125e:	0e 94 36 07 	call	0xe6c	; 0xe6c <lcd_wr_char>
		flag=1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1266:	8e 81       	ldd	r24, Y+6	; 0x06
    1268:	9f 81       	ldd	r25, Y+7	; 0x07
    126a:	84 30       	cpi	r24, 0x04	; 4
    126c:	91 05       	cpc	r25, r1
    126e:	19 f0       	breq	.+6      	; 0x1276 <lcd_print+0x86>
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	11 f5       	brne	.+68     	; 0x12ba <lcd_print+0xca>
	{
		temp = value/1000;
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	9d 81       	ldd	r25, Y+5	; 0x05
    127a:	28 ee       	ldi	r18, 0xE8	; 232
    127c:	33 e0       	ldi	r19, 0x03	; 3
    127e:	b9 01       	movw	r22, r18
    1280:	0e 94 b3 12 	call	0x2566	; 0x2566 <__udivmodhi4>
    1284:	cb 01       	movw	r24, r22
    1286:	90 93 6f 01 	sts	0x016F, r25
    128a:	80 93 6e 01 	sts	0x016E, r24
		thousand = temp%10 + 48;
    128e:	80 91 6e 01 	lds	r24, 0x016E
    1292:	90 91 6f 01 	lds	r25, 0x016F
    1296:	2a e0       	ldi	r18, 0x0A	; 10
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	b9 01       	movw	r22, r18
    129c:	0e 94 b3 12 	call	0x2566	; 0x2566 <__udivmodhi4>
    12a0:	c0 96       	adiw	r24, 0x30	; 48
    12a2:	90 93 7a 01 	sts	0x017A, r25
    12a6:	80 93 79 01 	sts	0x0179, r24
		lcd_wr_char(thousand);
    12aa:	80 91 79 01 	lds	r24, 0x0179
    12ae:	90 91 7a 01 	lds	r25, 0x017A
    12b2:	0e 94 36 07 	call	0xe6c	; 0xe6c <lcd_wr_char>
		flag=1;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    12ba:	8e 81       	ldd	r24, Y+6	; 0x06
    12bc:	9f 81       	ldd	r25, Y+7	; 0x07
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	91 05       	cpc	r25, r1
    12c2:	19 f0       	breq	.+6      	; 0x12ca <lcd_print+0xda>
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	11 f5       	brne	.+68     	; 0x130e <lcd_print+0x11e>
	{
		temp = value/100;
    12ca:	8c 81       	ldd	r24, Y+4	; 0x04
    12cc:	9d 81       	ldd	r25, Y+5	; 0x05
    12ce:	24 e6       	ldi	r18, 0x64	; 100
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	b9 01       	movw	r22, r18
    12d4:	0e 94 b3 12 	call	0x2566	; 0x2566 <__udivmodhi4>
    12d8:	cb 01       	movw	r24, r22
    12da:	90 93 6f 01 	sts	0x016F, r25
    12de:	80 93 6e 01 	sts	0x016E, r24
		hundred = temp%10 + 48;
    12e2:	80 91 6e 01 	lds	r24, 0x016E
    12e6:	90 91 6f 01 	lds	r25, 0x016F
    12ea:	2a e0       	ldi	r18, 0x0A	; 10
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	b9 01       	movw	r22, r18
    12f0:	0e 94 b3 12 	call	0x2566	; 0x2566 <__udivmodhi4>
    12f4:	c0 96       	adiw	r24, 0x30	; 48
    12f6:	90 93 76 01 	sts	0x0176, r25
    12fa:	80 93 75 01 	sts	0x0175, r24
		lcd_wr_char(hundred);
    12fe:	80 91 75 01 	lds	r24, 0x0175
    1302:	90 91 76 01 	lds	r25, 0x0176
    1306:	0e 94 36 07 	call	0xe6c	; 0xe6c <lcd_wr_char>
		flag=1;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    130e:	8e 81       	ldd	r24, Y+6	; 0x06
    1310:	9f 81       	ldd	r25, Y+7	; 0x07
    1312:	82 30       	cpi	r24, 0x02	; 2
    1314:	91 05       	cpc	r25, r1
    1316:	19 f0       	breq	.+6      	; 0x131e <lcd_print+0x12e>
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	11 f5       	brne	.+68     	; 0x1362 <lcd_print+0x172>
	{
		temp = value/10;
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	2a e0       	ldi	r18, 0x0A	; 10
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	b9 01       	movw	r22, r18
    1328:	0e 94 b3 12 	call	0x2566	; 0x2566 <__udivmodhi4>
    132c:	cb 01       	movw	r24, r22
    132e:	90 93 6f 01 	sts	0x016F, r25
    1332:	80 93 6e 01 	sts	0x016E, r24
		tens = temp%10 + 48;
    1336:	80 91 6e 01 	lds	r24, 0x016E
    133a:	90 91 6f 01 	lds	r25, 0x016F
    133e:	2a e0       	ldi	r18, 0x0A	; 10
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	b9 01       	movw	r22, r18
    1344:	0e 94 b3 12 	call	0x2566	; 0x2566 <__udivmodhi4>
    1348:	c0 96       	adiw	r24, 0x30	; 48
    134a:	90 93 74 01 	sts	0x0174, r25
    134e:	80 93 73 01 	sts	0x0173, r24
		lcd_wr_char(tens);
    1352:	80 91 73 01 	lds	r24, 0x0173
    1356:	90 91 74 01 	lds	r25, 0x0174
    135a:	0e 94 36 07 	call	0xe6c	; 0xe6c <lcd_wr_char>
		flag=1;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1362:	8e 81       	ldd	r24, Y+6	; 0x06
    1364:	9f 81       	ldd	r25, Y+7	; 0x07
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	91 05       	cpc	r25, r1
    136a:	19 f0       	breq	.+6      	; 0x1372 <lcd_print+0x182>
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	91 f4       	brne	.+36     	; 0x1396 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    1372:	8c 81       	ldd	r24, Y+4	; 0x04
    1374:	9d 81       	ldd	r25, Y+5	; 0x05
    1376:	2a e0       	ldi	r18, 0x0A	; 10
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	b9 01       	movw	r22, r18
    137c:	0e 94 b3 12 	call	0x2566	; 0x2566 <__udivmodhi4>
    1380:	c0 96       	adiw	r24, 0x30	; 48
    1382:	90 93 78 01 	sts	0x0178, r25
    1386:	80 93 77 01 	sts	0x0177, r24
		lcd_wr_char(unit);
    138a:	80 91 77 01 	lds	r24, 0x0177
    138e:	90 91 78 01 	lds	r25, 0x0178
    1392:	0e 94 36 07 	call	0xe6c	; 0xe6c <lcd_wr_char>
	}
	if(digits>5)
    1396:	8e 81       	ldd	r24, Y+6	; 0x06
    1398:	9f 81       	ldd	r25, Y+7	; 0x07
    139a:	86 30       	cpi	r24, 0x06	; 6
    139c:	91 05       	cpc	r25, r1
    139e:	1c f0       	brlt	.+6      	; 0x13a6 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    13a0:	85 e4       	ldi	r24, 0x45	; 69
    13a2:	0e 94 36 07 	call	0xe6c	; 0xe6c <lcd_wr_char>
	}
}
    13a6:	27 96       	adiw	r28, 0x07	; 7
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <motion_pin_config>:
unsigned char c = 0;
unsigned char r = 0;
unsigned char PortBRestore = 0;

void motion_pin_config (void)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
 DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
    13c0:	a7 e3       	ldi	r26, 0x37	; 55
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e7 e3       	ldi	r30, 0x37	; 55
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	8f 60       	ori	r24, 0x0F	; 15
    13cc:	8c 93       	st	X, r24
 PORTB = PORTB & 0xF0; // set initial value of the PORTB3 to PORTB0 pins to logic 0
    13ce:	a8 e3       	ldi	r26, 0x38	; 56
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e8 e3       	ldi	r30, 0x38	; 56
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	80 7f       	andi	r24, 0xF0	; 240
    13da:	8c 93       	st	X, r24
 DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
    13dc:	a1 e3       	ldi	r26, 0x31	; 49
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e1 e3       	ldi	r30, 0x31	; 49
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	80 63       	ori	r24, 0x30	; 48
    13e8:	8c 93       	st	X, r24
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
    13ea:	a2 e3       	ldi	r26, 0x32	; 50
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e2 e3       	ldi	r30, 0x32	; 50
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	80 63       	ori	r24, 0x30	; 48
    13f6:	8c 93       	st	X, r24
}
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <velocity>:

void velocity (unsigned char left_motor, unsigned char right_motor)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	00 d0       	rcall	.+0      	; 0x1404 <velocity+0x6>
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	6a 83       	std	Y+2, r22	; 0x02
OCR1AL = left_motor;
    140c:	ea e4       	ldi	r30, 0x4A	; 74
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	80 83       	st	Z, r24
OCR1BL = right_motor;
    1414:	e8 e4       	ldi	r30, 0x48	; 72
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	80 83       	st	Z, r24
}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	00 d0       	rcall	.+0      	; 0x142c <motion_set+0x6>
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortBRestore = 0;
    1432:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	8f 70       	andi	r24, 0x0F	; 15
    1438:	8a 83       	std	Y+2, r24	; 0x02
 PortBRestore = PORTB; 			// reading the PORTB's original status
    143a:	e8 e3       	ldi	r30, 0x38	; 56
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	89 83       	std	Y+1, r24	; 0x01
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	80 7f       	andi	r24, 0xF0	; 240
    1446:	89 83       	std	Y+1, r24	; 0x01
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
    1448:	99 81       	ldd	r25, Y+1	; 0x01
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	89 2b       	or	r24, r25
    144e:	89 83       	std	Y+1, r24	; 0x01
 PORTB = PortBRestore; 			// setting the command to the port
    1450:	e8 e3       	ldi	r30, 0x38	; 56
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	80 83       	st	Z, r24
}
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <forward>:

void forward (void)         //both wheels forward
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
    146a:	86 e0       	ldi	r24, 0x06	; 6
    146c:	0e 94 13 0a 	call	0x1426	; 0x1426 <motion_set>
}
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <back>:

void back (void)            //both wheels backward
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
    147e:	89 e0       	ldi	r24, 0x09	; 9
    1480:	0e 94 13 0a 	call	0x1426	; 0x1426 <motion_set>
}
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <left>:

void left (void)            //Left wheel backward, Right wheel forward
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
    1492:	85 e0       	ldi	r24, 0x05	; 5
    1494:	0e 94 13 0a 	call	0x1426	; 0x1426 <motion_set>
}
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <right>:

void right (void)           //Left wheel forward, Right wheel backward
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
    14a6:	8a e0       	ldi	r24, 0x0A	; 10
    14a8:	0e 94 13 0a 	call	0x1426	; 0x1426 <motion_set>
}
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <soft_left>:

void soft_left (void)       //Left wheel stationary, Right wheel forward
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
    14ba:	84 e0       	ldi	r24, 0x04	; 4
    14bc:	0e 94 13 0a 	call	0x1426	; 0x1426 <motion_set>
}
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <soft_right>:

void soft_right (void)      //Left wheel forward, Right wheel is stationary
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
    14ce:	82 e0       	ldi	r24, 0x02	; 2
    14d0:	0e 94 13 0a 	call	0x1426	; 0x1426 <motion_set>
}
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <soft_left_2>:

void soft_left_2 (void)     //Left wheel backward, right wheel stationary
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	0e 94 13 0a 	call	0x1426	; 0x1426 <motion_set>
}
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <soft_right_2>:

void soft_right_2 (void)    //Left wheel stationary, Right wheel backward
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
    14f6:	88 e0       	ldi	r24, 0x08	; 8
    14f8:	0e 94 13 0a 	call	0x1426	; 0x1426 <motion_set>
}
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <hard_stop>:

void hard_stop (void)       //hard stop(stop suddenly)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	0e 94 13 0a 	call	0x1426	; 0x1426 <motion_set>
}
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <soft_stop>:

void soft_stop (void)       //soft stop(stops slowly)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0F);
    151e:	8f e0       	ldi	r24, 0x0F	; 15
    1520:	0e 94 13 0a 	call	0x1426	; 0x1426 <motion_set>
}
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <adc_init>:

//Function to Initialize ADC
void adc_init()
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
 ADCSRA = 0x00;
    1532:	e6 e2       	ldi	r30, 0x26	; 38
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	10 82       	st	Z, r1
 ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1538:	e7 e2       	ldi	r30, 0x27	; 39
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 e2       	ldi	r24, 0x20	; 32
    153e:	80 83       	st	Z, r24
 ACSR = 0x80;
    1540:	e8 e2       	ldi	r30, 0x28	; 40
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 e8       	ldi	r24, 0x80	; 128
    1546:	80 83       	st	Z, r24
 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1548:	e6 e2       	ldi	r30, 0x26	; 38
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	86 e8       	ldi	r24, 0x86	; 134
    154e:	80 83       	st	Z, r24
}
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <init_devices>:


void init_devices (void)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    155e:	f8 94       	cli
 port_init();
    1560:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <port_init>
 adc_init();
    1564:	0e 94 95 0a 	call	0x152a	; 0x152a <adc_init>
 sei(); //Enables the global interrupts
    1568:	78 94       	sei
}
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <lcd_port_config>:


//Function to configure LCD port
void lcd_port_config (void)
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
    1578:	a4 e3       	ldi	r26, 0x34	; 52
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e4 e3       	ldi	r30, 0x34	; 52
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	87 6f       	ori	r24, 0xF7	; 247
    1584:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
    1586:	a5 e3       	ldi	r26, 0x35	; 53
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e5 e3       	ldi	r30, 0x35	; 53
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	80 78       	andi	r24, 0x80	; 128
    1592:	8c 93       	st	X, r24
}
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
 DDRA = 0x00;   //set PORTF direction as input
    15a2:	ea e3       	ldi	r30, 0x3A	; 58
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	10 82       	st	Z, r1
 PORTA = 0x00;  //set PORTF pins floating
    15a8:	eb e3       	ldi	r30, 0x3B	; 59
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	10 82       	st	Z, r1
}
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <port_init>:

//Function to Initialize PORTS
void port_init()
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
 lcd_port_config();
    15bc:	0e 94 b8 0a 	call	0x1570	; 0x1570 <lcd_port_config>
 adc_pin_config();
    15c0:	0e 94 cd 0a 	call	0x159a	; 0x159a <adc_pin_config>
 motion_pin_config();
    15c4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <motion_pin_config>
}
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <timer1_init>:
//TIMER1 initialize - prescale:64
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// desired value: 450Hz
// actual value: 450.000Hz (0.0%)
void timer1_init(void)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    15d6:	ee e4       	ldi	r30, 0x4E	; 78
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	10 82       	st	Z, r1
 TCNT1H = 0xFF; //setup
    15dc:	ed e4       	ldi	r30, 0x4D	; 77
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	8f ef       	ldi	r24, 0xFF	; 255
    15e2:	80 83       	st	Z, r24
 TCNT1L = 0x01;
    15e4:	ec e4       	ldi	r30, 0x4C	; 76
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	80 83       	st	Z, r24
 OCR1AH = 0x00;
    15ec:	eb e4       	ldi	r30, 0x4B	; 75
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	10 82       	st	Z, r1
 OCR1AL = 0xFF;
    15f2:	ea e4       	ldi	r30, 0x4A	; 74
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	8f ef       	ldi	r24, 0xFF	; 255
    15f8:	80 83       	st	Z, r24
 OCR1BH = 0x00;
    15fa:	e9 e4       	ldi	r30, 0x49	; 73
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	10 82       	st	Z, r1
 OCR1BL = 0xFF;
    1600:	e8 e4       	ldi	r30, 0x48	; 72
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	8f ef       	ldi	r24, 0xFF	; 255
    1606:	80 83       	st	Z, r24
 ICR1H  = 0x00;
    1608:	e7 e4       	ldi	r30, 0x47	; 71
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	10 82       	st	Z, r1
 ICR1L  = 0xFF;
    160e:	e6 e4       	ldi	r30, 0x46	; 70
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	8f ef       	ldi	r24, 0xFF	; 255
    1614:	80 83       	st	Z, r24
 TCCR1A = 0xA1;
    1616:	ef e4       	ldi	r30, 0x4F	; 79
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	81 ea       	ldi	r24, 0xA1	; 161
    161c:	80 83       	st	Z, r24
 TCCR1B = 0x0D; //start Timer
    161e:	ee e4       	ldi	r30, 0x4E	; 78
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	8d e0       	ldi	r24, 0x0D	; 13
    1624:	80 83       	st	Z, r24
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <ADC_Conversion>:

//This Function accepts the Channel Number and returns the corresponding Analog Value
unsigned char ADC_Conversion(unsigned char Ch)
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	00 d0       	rcall	.+0      	; 0x1632 <ADC_Conversion+0x6>
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char a;
 Ch = Ch & 0x07;
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	87 70       	andi	r24, 0x07	; 7
    163c:	8a 83       	std	Y+2, r24	; 0x02
 ADMUX= 0x20| Ch;
    163e:	e7 e2       	ldi	r30, 0x27	; 39
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	80 62       	ori	r24, 0x20	; 32
    1646:	80 83       	st	Z, r24
 ADCSRA = ADCSRA | 0x40;	//Set start conversion bit
    1648:	a6 e2       	ldi	r26, 0x26	; 38
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e6 e2       	ldi	r30, 0x26	; 38
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	80 64       	ori	r24, 0x40	; 64
    1654:	8c 93       	st	X, r24
 while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
    1656:	e6 e2       	ldi	r30, 0x26	; 38
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	80 71       	andi	r24, 0x10	; 16
    1662:	90 70       	andi	r25, 0x00	; 0
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	b9 f3       	breq	.-18     	; 0x1656 <ADC_Conversion+0x2a>
 a=ADCH;
    1668:	e5 e2       	ldi	r30, 0x25	; 37
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	89 83       	std	Y+1, r24	; 0x01
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1670:	a6 e2       	ldi	r26, 0x26	; 38
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e6 e2       	ldi	r30, 0x26	; 38
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	80 61       	ori	r24, 0x10	; 16
    167c:	8c 93       	st	X, r24
 return a;
    167e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <main>:

//Main Function
int main(void)
{
    168a:	ef 92       	push	r14
    168c:	ff 92       	push	r15
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	a0 97       	sbiw	r28, 0x20	; 32
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
  timer1_init();
    16a6:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <timer1_init>
  init_devices();
    16aa:	0e 94 ab 0a 	call	0x1556	; 0x1556 <init_devices>
  lcd_set_4bit();
    16ae:	0e 94 49 00 	call	0x92	; 0x92 <lcd_set_4bit>
  lcd_init();
    16b2:	0e 94 48 05 	call	0xa90	; 0xa90 <lcd_init>
  forward();
    16b6:	0e 94 31 0a 	call	0x1462	; 0x1462 <forward>

  int pid_output = 0;
    16ba:	1e 8e       	std	Y+30, r1	; 0x1e
    16bc:	1d 8e       	std	Y+29, r1	; 0x1d
  int l_value,r_value;
  int  bot_speed = 220;
    16be:	8c ed       	ldi	r24, 0xDC	; 220
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	98 8f       	std	Y+24, r25	; 0x18
    16c4:	8f 8b       	std	Y+23, r24	; 0x17
  int error = 0;
    16c6:	1e 8a       	std	Y+22, r1	; 0x16
    16c8:	1d 8a       	std	Y+21, r1	; 0x15
  int diff = 0;
    16ca:	1c 8a       	std	Y+20, r1	; 0x14
    16cc:	1b 8a       	std	Y+19, r1	; 0x13
  int integrate = 0;
    16ce:	1a 8a       	std	Y+18, r1	; 0x12
    16d0:	19 8a       	std	Y+17, r1	; 0x11
  int past_error = 0;
    16d2:	18 8a       	std	Y+16, r1	; 0x10
    16d4:	1f 86       	std	Y+15, r1	; 0x0f
  int factor = 0;
    16d6:	1e 86       	std	Y+14, r1	; 0x0e
    16d8:	1d 86       	std	Y+13, r1	; 0x0d
  float kp = 40;
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	a0 e2       	ldi	r26, 0x20	; 32
    16e0:	b2 e4       	ldi	r27, 0x42	; 66
    16e2:	89 87       	std	Y+9, r24	; 0x09
    16e4:	9a 87       	std	Y+10, r25	; 0x0a
    16e6:	ab 87       	std	Y+11, r26	; 0x0b
    16e8:	bc 87       	std	Y+12, r27	; 0x0c
  float ki = 0.05;
    16ea:	8d ec       	ldi	r24, 0xCD	; 205
    16ec:	9c ec       	ldi	r25, 0xCC	; 204
    16ee:	ac e4       	ldi	r26, 0x4C	; 76
    16f0:	bd e3       	ldi	r27, 0x3D	; 61
    16f2:	8d 83       	std	Y+5, r24	; 0x05
    16f4:	9e 83       	std	Y+6, r25	; 0x06
    16f6:	af 83       	std	Y+7, r26	; 0x07
    16f8:	b8 87       	std	Y+8, r27	; 0x08
  float kd = 80;
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	a0 ea       	ldi	r26, 0xA0	; 160
    1700:	b2 e4       	ldi	r27, 0x42	; 66
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	9a 83       	std	Y+2, r25	; 0x02
    1706:	ab 83       	std	Y+3, r26	; 0x03
    1708:	bc 83       	std	Y+4, r27	; 0x04


  while(1){

    l=ADC_Conversion(3);
    170a:	83 e0       	ldi	r24, 0x03	; 3
    170c:	0e 94 16 0b 	call	0x162c	; 0x162c <ADC_Conversion>
    1710:	80 93 68 01 	sts	0x0168, r24
  	c=ADC_Conversion(4);
    1714:	84 e0       	ldi	r24, 0x04	; 4
    1716:	0e 94 16 0b 	call	0x162c	; 0x162c <ADC_Conversion>
    171a:	80 93 69 01 	sts	0x0169, r24
  	r=ADC_Conversion(5);
    171e:	85 e0       	ldi	r24, 0x05	; 5
    1720:	0e 94 16 0b 	call	0x162c	; 0x162c <ADC_Conversion>
    1724:	80 93 6a 01 	sts	0x016A, r24
    //lcd_print(1, 1, l, 3);
   // lcd_print(1, 5, c, 3);
   // lcd_print(1, 9, r, 3);


    factor = (l-r);
    1728:	80 91 68 01 	lds	r24, 0x0168
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	80 91 6a 01 	lds	r24, 0x016A
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	a9 01       	movw	r20, r18
    173a:	48 1b       	sub	r20, r24
    173c:	59 0b       	sbc	r21, r25
    173e:	ca 01       	movw	r24, r20
    1740:	9e 87       	std	Y+14, r25	; 0x0e
    1742:	8d 87       	std	Y+13, r24	; 0x0d
    error = factor*(1 + abs(c-130)/50);
    1744:	80 91 69 01 	lds	r24, 0x0169
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	82 58       	subi	r24, 0x82	; 130
    174e:	90 40       	sbci	r25, 0x00	; 0
    1750:	98 a3       	std	Y+32, r25	; 0x20
    1752:	8f 8f       	std	Y+31, r24	; 0x1f
    1754:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1756:	98 a1       	ldd	r25, Y+32	; 0x20
    1758:	99 23       	and	r25, r25
    175a:	3c f4       	brge	.+14     	; 0x176a <main+0xe0>
    175c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    175e:	58 a1       	ldd	r21, Y+32	; 0x20
    1760:	50 95       	com	r21
    1762:	41 95       	neg	r20
    1764:	5f 4f       	sbci	r21, 0xFF	; 255
    1766:	58 a3       	std	Y+32, r21	; 0x20
    1768:	4f 8f       	std	Y+31, r20	; 0x1f
    176a:	22 e3       	ldi	r18, 0x32	; 50
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1770:	98 a1       	ldd	r25, Y+32	; 0x20
    1772:	b9 01       	movw	r22, r18
    1774:	0e 94 c7 12 	call	0x258e	; 0x258e <__divmodhi4>
    1778:	cb 01       	movw	r24, r22
    177a:	9c 01       	movw	r18, r24
    177c:	2f 5f       	subi	r18, 0xFF	; 255
    177e:	3f 4f       	sbci	r19, 0xFF	; 255
    1780:	8d 85       	ldd	r24, Y+13	; 0x0d
    1782:	9e 85       	ldd	r25, Y+14	; 0x0e
    1784:	ac 01       	movw	r20, r24
    1786:	24 9f       	mul	r18, r20
    1788:	c0 01       	movw	r24, r0
    178a:	25 9f       	mul	r18, r21
    178c:	90 0d       	add	r25, r0
    178e:	34 9f       	mul	r19, r20
    1790:	90 0d       	add	r25, r0
    1792:	11 24       	eor	r1, r1
    1794:	9e 8b       	std	Y+22, r25	; 0x16
    1796:	8d 8b       	std	Y+21, r24	; 0x15
    diff = error - past_error;
    1798:	2d 89       	ldd	r18, Y+21	; 0x15
    179a:	3e 89       	ldd	r19, Y+22	; 0x16
    179c:	8f 85       	ldd	r24, Y+15	; 0x0f
    179e:	98 89       	ldd	r25, Y+16	; 0x10
    17a0:	a9 01       	movw	r20, r18
    17a2:	48 1b       	sub	r20, r24
    17a4:	59 0b       	sbc	r21, r25
    17a6:	ca 01       	movw	r24, r20
    17a8:	9c 8b       	std	Y+20, r25	; 0x14
    17aa:	8b 8b       	std	Y+19, r24	; 0x13
    integrate = error + integrate;
    17ac:	29 89       	ldd	r18, Y+17	; 0x11
    17ae:	3a 89       	ldd	r19, Y+18	; 0x12
    17b0:	8d 89       	ldd	r24, Y+21	; 0x15
    17b2:	9e 89       	ldd	r25, Y+22	; 0x16
    17b4:	82 0f       	add	r24, r18
    17b6:	93 1f       	adc	r25, r19
    17b8:	9a 8b       	std	Y+18, r25	; 0x12
    17ba:	89 8b       	std	Y+17, r24	; 0x11
    pid_output = kp*error + kd*diff + ki*integrate;
    17bc:	8d 89       	ldd	r24, Y+21	; 0x15
    17be:	9e 89       	ldd	r25, Y+22	; 0x16
    17c0:	aa 27       	eor	r26, r26
    17c2:	97 fd       	sbrc	r25, 7
    17c4:	a0 95       	com	r26
    17c6:	ba 2f       	mov	r27, r26
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	0e 94 0c 10 	call	0x2018	; 0x2018 <__floatsisf>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	bc 01       	movw	r22, r24
    17d6:	cd 01       	movw	r24, r26
    17d8:	29 85       	ldd	r18, Y+9	; 0x09
    17da:	3a 85       	ldd	r19, Y+10	; 0x0a
    17dc:	4b 85       	ldd	r20, Y+11	; 0x0b
    17de:	5c 85       	ldd	r21, Y+12	; 0x0c
    17e0:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	7c 01       	movw	r14, r24
    17ea:	8d 01       	movw	r16, r26
    17ec:	8b 89       	ldd	r24, Y+19	; 0x13
    17ee:	9c 89       	ldd	r25, Y+20	; 0x14
    17f0:	aa 27       	eor	r26, r26
    17f2:	97 fd       	sbrc	r25, 7
    17f4:	a0 95       	com	r26
    17f6:	ba 2f       	mov	r27, r26
    17f8:	bc 01       	movw	r22, r24
    17fa:	cd 01       	movw	r24, r26
    17fc:	0e 94 0c 10 	call	0x2018	; 0x2018 <__floatsisf>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	29 81       	ldd	r18, Y+1	; 0x01
    180a:	3a 81       	ldd	r19, Y+2	; 0x02
    180c:	4b 81       	ldd	r20, Y+3	; 0x03
    180e:	5c 81       	ldd	r21, Y+4	; 0x04
    1810:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	9c 01       	movw	r18, r24
    181a:	ad 01       	movw	r20, r26
    181c:	c8 01       	movw	r24, r16
    181e:	b7 01       	movw	r22, r14
    1820:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__addsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	7c 01       	movw	r14, r24
    182a:	8d 01       	movw	r16, r26
    182c:	89 89       	ldd	r24, Y+17	; 0x11
    182e:	9a 89       	ldd	r25, Y+18	; 0x12
    1830:	aa 27       	eor	r26, r26
    1832:	97 fd       	sbrc	r25, 7
    1834:	a0 95       	com	r26
    1836:	ba 2f       	mov	r27, r26
    1838:	bc 01       	movw	r22, r24
    183a:	cd 01       	movw	r24, r26
    183c:	0e 94 0c 10 	call	0x2018	; 0x2018 <__floatsisf>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	bc 01       	movw	r22, r24
    1846:	cd 01       	movw	r24, r26
    1848:	2d 81       	ldd	r18, Y+5	; 0x05
    184a:	3e 81       	ldd	r19, Y+6	; 0x06
    184c:	4f 81       	ldd	r20, Y+7	; 0x07
    184e:	58 85       	ldd	r21, Y+8	; 0x08
    1850:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	9c 01       	movw	r18, r24
    185a:	ad 01       	movw	r20, r26
    185c:	c8 01       	movw	r24, r16
    185e:	b7 01       	movw	r22, r14
    1860:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__addsf3>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	bc 01       	movw	r22, r24
    186a:	cd 01       	movw	r24, r26
    186c:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__fixsfsi>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	9e 8f       	std	Y+30, r25	; 0x1e
    1876:	8d 8f       	std	Y+29, r24	; 0x1d
    past_error = error;
    1878:	8d 89       	ldd	r24, Y+21	; 0x15
    187a:	9e 89       	ldd	r25, Y+22	; 0x16
    187c:	98 8b       	std	Y+16, r25	; 0x10
    187e:	8f 87       	std	Y+15, r24	; 0x0f
   // }

   // r_value = (bot_speed + pid_output);
   // l_value = (bot_speed - pid_output);

    if(l > 115 && c >115 && r >115){
    1880:	80 91 68 01 	lds	r24, 0x0168
    1884:	84 37       	cpi	r24, 0x74	; 116
    1886:	58 f0       	brcs	.+22     	; 0x189e <main+0x214>
    1888:	80 91 69 01 	lds	r24, 0x0169
    188c:	84 37       	cpi	r24, 0x74	; 116
    188e:	38 f0       	brcs	.+14     	; 0x189e <main+0x214>
    1890:	80 91 6a 01 	lds	r24, 0x016A
    1894:	84 37       	cpi	r24, 0x74	; 116
    1896:	18 f0       	brcs	.+6      	; 0x189e <main+0x214>
      soft_right();
    1898:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <soft_right>
    189c:	36 c0       	rjmp	.+108    	; 0x190a <main+0x280>
    }

    else if((r-l) > 130){
    189e:	80 91 6a 01 	lds	r24, 0x016A
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	80 91 68 01 	lds	r24, 0x0168
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	a9 01       	movw	r20, r18
    18b0:	48 1b       	sub	r20, r24
    18b2:	59 0b       	sbc	r21, r25
    18b4:	ca 01       	movw	r24, r20
    18b6:	83 38       	cpi	r24, 0x83	; 131
    18b8:	91 05       	cpc	r25, r1
    18ba:	5c f0       	brlt	.+22     	; 0x18d2 <main+0x248>
      right();
    18bc:	0e 94 4f 0a 	call	0x149e	; 0x149e <right>
      r_value = bot_speed;
    18c0:	8f 89       	ldd	r24, Y+23	; 0x17
    18c2:	98 8d       	ldd	r25, Y+24	; 0x18
    18c4:	9a 8f       	std	Y+26, r25	; 0x1a
    18c6:	89 8f       	std	Y+25, r24	; 0x19
      l_value = bot_speed;
    18c8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ca:	98 8d       	ldd	r25, Y+24	; 0x18
    18cc:	9c 8f       	std	Y+28, r25	; 0x1c
    18ce:	8b 8f       	std	Y+27, r24	; 0x1b
    18d0:	1c c0       	rjmp	.+56     	; 0x190a <main+0x280>

    }

    else if((l-r) > 130){
    18d2:	80 91 68 01 	lds	r24, 0x0168
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	80 91 6a 01 	lds	r24, 0x016A
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a9 01       	movw	r20, r18
    18e4:	48 1b       	sub	r20, r24
    18e6:	59 0b       	sbc	r21, r25
    18e8:	ca 01       	movw	r24, r20
    18ea:	83 38       	cpi	r24, 0x83	; 131
    18ec:	91 05       	cpc	r25, r1
    18ee:	5c f0       	brlt	.+22     	; 0x1906 <main+0x27c>
      left();
    18f0:	0e 94 45 0a 	call	0x148a	; 0x148a <left>
      r_value = bot_speed;
    18f4:	8f 89       	ldd	r24, Y+23	; 0x17
    18f6:	98 8d       	ldd	r25, Y+24	; 0x18
    18f8:	9a 8f       	std	Y+26, r25	; 0x1a
    18fa:	89 8f       	std	Y+25, r24	; 0x19
      l_value = bot_speed;
    18fc:	8f 89       	ldd	r24, Y+23	; 0x17
    18fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1900:	9c 8f       	std	Y+28, r25	; 0x1c
    1902:	8b 8f       	std	Y+27, r24	; 0x1b
    1904:	02 c0       	rjmp	.+4      	; 0x190a <main+0x280>

    }

    else forward();
    1906:	0e 94 31 0a 	call	0x1462	; 0x1462 <forward>

    if(r_value > 220){
    190a:	89 8d       	ldd	r24, Y+25	; 0x19
    190c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    190e:	8d 3d       	cpi	r24, 0xDD	; 221
    1910:	91 05       	cpc	r25, r1
    1912:	2c f0       	brlt	.+10     	; 0x191e <main+0x294>
      r_value = 255;
    1914:	8f ef       	ldi	r24, 0xFF	; 255
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9a 8f       	std	Y+26, r25	; 0x1a
    191a:	89 8f       	std	Y+25, r24	; 0x19
    191c:	06 c0       	rjmp	.+12     	; 0x192a <main+0x2a0>
    }

    else if(r_value < 0){
    191e:	89 8d       	ldd	r24, Y+25	; 0x19
    1920:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1922:	99 23       	and	r25, r25
    1924:	14 f4       	brge	.+4      	; 0x192a <main+0x2a0>
      r_value = 0;
    1926:	1a 8e       	std	Y+26, r1	; 0x1a
    1928:	19 8e       	std	Y+25, r1	; 0x19
    }


    if(l_value > 255){
    192a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    192c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    192e:	8f 3f       	cpi	r24, 0xFF	; 255
    1930:	91 05       	cpc	r25, r1
    1932:	31 f0       	breq	.+12     	; 0x1940 <main+0x2b6>
    1934:	2c f0       	brlt	.+10     	; 0x1940 <main+0x2b6>
          l_value = 255;
    1936:	8f ef       	ldi	r24, 0xFF	; 255
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	9c 8f       	std	Y+28, r25	; 0x1c
    193c:	8b 8f       	std	Y+27, r24	; 0x1b
    193e:	06 c0       	rjmp	.+12     	; 0x194c <main+0x2c2>
     }

    else if(l_value < 0){
    1940:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1942:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1944:	99 23       	and	r25, r25
    1946:	14 f4       	brge	.+4      	; 0x194c <main+0x2c2>
          l_value = 0;
    1948:	1c 8e       	std	Y+28, r1	; 0x1c
    194a:	1b 8e       	std	Y+27, r1	; 0x1b
      }

      velocity(l_value,r_value);
    194c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    194e:	99 8d       	ldd	r25, Y+25	; 0x19
    1950:	69 2f       	mov	r22, r25
    1952:	0e 94 ff 09 	call	0x13fe	; 0x13fe <velocity>
    1956:	d9 ce       	rjmp	.-590    	; 0x170a <main+0x80>

00001958 <__fixunssfsi>:
    1958:	ef 92       	push	r14
    195a:	ff 92       	push	r15
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	7b 01       	movw	r14, r22
    1962:	8c 01       	movw	r16, r24
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	5f e4       	ldi	r21, 0x4F	; 79
    196c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__gesf2>
    1970:	88 23       	and	r24, r24
    1972:	8c f0       	brlt	.+34     	; 0x1996 <__fixunssfsi+0x3e>
    1974:	c8 01       	movw	r24, r16
    1976:	b7 01       	movw	r22, r14
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	5f e4       	ldi	r21, 0x4F	; 79
    1980:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <__subsf3>
    1984:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__fixsfsi>
    1988:	9b 01       	movw	r18, r22
    198a:	ac 01       	movw	r20, r24
    198c:	20 50       	subi	r18, 0x00	; 0
    198e:	30 40       	sbci	r19, 0x00	; 0
    1990:	40 40       	sbci	r20, 0x00	; 0
    1992:	50 48       	sbci	r21, 0x80	; 128
    1994:	06 c0       	rjmp	.+12     	; 0x19a2 <__fixunssfsi+0x4a>
    1996:	c8 01       	movw	r24, r16
    1998:	b7 01       	movw	r22, r14
    199a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__fixsfsi>
    199e:	9b 01       	movw	r18, r22
    19a0:	ac 01       	movw	r20, r24
    19a2:	b9 01       	movw	r22, r18
    19a4:	ca 01       	movw	r24, r20
    19a6:	1f 91       	pop	r17
    19a8:	0f 91       	pop	r16
    19aa:	ff 90       	pop	r15
    19ac:	ef 90       	pop	r14
    19ae:	08 95       	ret

000019b0 <_fpadd_parts>:
    19b0:	a0 e0       	ldi	r26, 0x00	; 0
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ee ed       	ldi	r30, 0xDE	; 222
    19b6:	fc e0       	ldi	r31, 0x0C	; 12
    19b8:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__prologue_saves__>
    19bc:	dc 01       	movw	r26, r24
    19be:	2b 01       	movw	r4, r22
    19c0:	fa 01       	movw	r30, r20
    19c2:	9c 91       	ld	r25, X
    19c4:	92 30       	cpi	r25, 0x02	; 2
    19c6:	08 f4       	brcc	.+2      	; 0x19ca <_fpadd_parts+0x1a>
    19c8:	39 c1       	rjmp	.+626    	; 0x1c3c <_fpadd_parts+0x28c>
    19ca:	eb 01       	movw	r28, r22
    19cc:	88 81       	ld	r24, Y
    19ce:	82 30       	cpi	r24, 0x02	; 2
    19d0:	08 f4       	brcc	.+2      	; 0x19d4 <_fpadd_parts+0x24>
    19d2:	33 c1       	rjmp	.+614    	; 0x1c3a <_fpadd_parts+0x28a>
    19d4:	94 30       	cpi	r25, 0x04	; 4
    19d6:	69 f4       	brne	.+26     	; 0x19f2 <_fpadd_parts+0x42>
    19d8:	84 30       	cpi	r24, 0x04	; 4
    19da:	09 f0       	breq	.+2      	; 0x19de <_fpadd_parts+0x2e>
    19dc:	2f c1       	rjmp	.+606    	; 0x1c3c <_fpadd_parts+0x28c>
    19de:	11 96       	adiw	r26, 0x01	; 1
    19e0:	9c 91       	ld	r25, X
    19e2:	11 97       	sbiw	r26, 0x01	; 1
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	98 17       	cp	r25, r24
    19e8:	09 f4       	brne	.+2      	; 0x19ec <_fpadd_parts+0x3c>
    19ea:	28 c1       	rjmp	.+592    	; 0x1c3c <_fpadd_parts+0x28c>
    19ec:	a0 e6       	ldi	r26, 0x60	; 96
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	25 c1       	rjmp	.+586    	; 0x1c3c <_fpadd_parts+0x28c>
    19f2:	84 30       	cpi	r24, 0x04	; 4
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <_fpadd_parts+0x48>
    19f6:	21 c1       	rjmp	.+578    	; 0x1c3a <_fpadd_parts+0x28a>
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	a9 f4       	brne	.+42     	; 0x1a26 <_fpadd_parts+0x76>
    19fc:	92 30       	cpi	r25, 0x02	; 2
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <_fpadd_parts+0x52>
    1a00:	1d c1       	rjmp	.+570    	; 0x1c3c <_fpadd_parts+0x28c>
    1a02:	9a 01       	movw	r18, r20
    1a04:	ad 01       	movw	r20, r26
    1a06:	88 e0       	ldi	r24, 0x08	; 8
    1a08:	ea 01       	movw	r28, r20
    1a0a:	09 90       	ld	r0, Y+
    1a0c:	ae 01       	movw	r20, r28
    1a0e:	e9 01       	movw	r28, r18
    1a10:	09 92       	st	Y+, r0
    1a12:	9e 01       	movw	r18, r28
    1a14:	81 50       	subi	r24, 0x01	; 1
    1a16:	c1 f7       	brne	.-16     	; 0x1a08 <_fpadd_parts+0x58>
    1a18:	e2 01       	movw	r28, r4
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	11 96       	adiw	r26, 0x01	; 1
    1a1e:	9c 91       	ld	r25, X
    1a20:	89 23       	and	r24, r25
    1a22:	81 83       	std	Z+1, r24	; 0x01
    1a24:	08 c1       	rjmp	.+528    	; 0x1c36 <_fpadd_parts+0x286>
    1a26:	92 30       	cpi	r25, 0x02	; 2
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <_fpadd_parts+0x7c>
    1a2a:	07 c1       	rjmp	.+526    	; 0x1c3a <_fpadd_parts+0x28a>
    1a2c:	12 96       	adiw	r26, 0x02	; 2
    1a2e:	2d 90       	ld	r2, X+
    1a30:	3c 90       	ld	r3, X
    1a32:	13 97       	sbiw	r26, 0x03	; 3
    1a34:	eb 01       	movw	r28, r22
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3a:	14 96       	adiw	r26, 0x04	; 4
    1a3c:	ad 90       	ld	r10, X+
    1a3e:	bd 90       	ld	r11, X+
    1a40:	cd 90       	ld	r12, X+
    1a42:	dc 90       	ld	r13, X
    1a44:	17 97       	sbiw	r26, 0x07	; 7
    1a46:	ec 80       	ldd	r14, Y+4	; 0x04
    1a48:	fd 80       	ldd	r15, Y+5	; 0x05
    1a4a:	0e 81       	ldd	r16, Y+6	; 0x06
    1a4c:	1f 81       	ldd	r17, Y+7	; 0x07
    1a4e:	91 01       	movw	r18, r2
    1a50:	28 1b       	sub	r18, r24
    1a52:	39 0b       	sbc	r19, r25
    1a54:	b9 01       	movw	r22, r18
    1a56:	37 ff       	sbrs	r19, 7
    1a58:	04 c0       	rjmp	.+8      	; 0x1a62 <_fpadd_parts+0xb2>
    1a5a:	66 27       	eor	r22, r22
    1a5c:	77 27       	eor	r23, r23
    1a5e:	62 1b       	sub	r22, r18
    1a60:	73 0b       	sbc	r23, r19
    1a62:	60 32       	cpi	r22, 0x20	; 32
    1a64:	71 05       	cpc	r23, r1
    1a66:	0c f0       	brlt	.+2      	; 0x1a6a <_fpadd_parts+0xba>
    1a68:	61 c0       	rjmp	.+194    	; 0x1b2c <_fpadd_parts+0x17c>
    1a6a:	12 16       	cp	r1, r18
    1a6c:	13 06       	cpc	r1, r19
    1a6e:	6c f5       	brge	.+90     	; 0x1aca <_fpadd_parts+0x11a>
    1a70:	37 01       	movw	r6, r14
    1a72:	48 01       	movw	r8, r16
    1a74:	06 2e       	mov	r0, r22
    1a76:	04 c0       	rjmp	.+8      	; 0x1a80 <_fpadd_parts+0xd0>
    1a78:	96 94       	lsr	r9
    1a7a:	87 94       	ror	r8
    1a7c:	77 94       	ror	r7
    1a7e:	67 94       	ror	r6
    1a80:	0a 94       	dec	r0
    1a82:	d2 f7       	brpl	.-12     	; 0x1a78 <_fpadd_parts+0xc8>
    1a84:	21 e0       	ldi	r18, 0x01	; 1
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e0       	ldi	r20, 0x00	; 0
    1a8a:	50 e0       	ldi	r21, 0x00	; 0
    1a8c:	04 c0       	rjmp	.+8      	; 0x1a96 <_fpadd_parts+0xe6>
    1a8e:	22 0f       	add	r18, r18
    1a90:	33 1f       	adc	r19, r19
    1a92:	44 1f       	adc	r20, r20
    1a94:	55 1f       	adc	r21, r21
    1a96:	6a 95       	dec	r22
    1a98:	d2 f7       	brpl	.-12     	; 0x1a8e <_fpadd_parts+0xde>
    1a9a:	21 50       	subi	r18, 0x01	; 1
    1a9c:	30 40       	sbci	r19, 0x00	; 0
    1a9e:	40 40       	sbci	r20, 0x00	; 0
    1aa0:	50 40       	sbci	r21, 0x00	; 0
    1aa2:	2e 21       	and	r18, r14
    1aa4:	3f 21       	and	r19, r15
    1aa6:	40 23       	and	r20, r16
    1aa8:	51 23       	and	r21, r17
    1aaa:	21 15       	cp	r18, r1
    1aac:	31 05       	cpc	r19, r1
    1aae:	41 05       	cpc	r20, r1
    1ab0:	51 05       	cpc	r21, r1
    1ab2:	21 f0       	breq	.+8      	; 0x1abc <_fpadd_parts+0x10c>
    1ab4:	21 e0       	ldi	r18, 0x01	; 1
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	50 e0       	ldi	r21, 0x00	; 0
    1abc:	79 01       	movw	r14, r18
    1abe:	8a 01       	movw	r16, r20
    1ac0:	e6 28       	or	r14, r6
    1ac2:	f7 28       	or	r15, r7
    1ac4:	08 29       	or	r16, r8
    1ac6:	19 29       	or	r17, r9
    1ac8:	3c c0       	rjmp	.+120    	; 0x1b42 <_fpadd_parts+0x192>
    1aca:	23 2b       	or	r18, r19
    1acc:	d1 f1       	breq	.+116    	; 0x1b42 <_fpadd_parts+0x192>
    1ace:	26 0e       	add	r2, r22
    1ad0:	37 1e       	adc	r3, r23
    1ad2:	35 01       	movw	r6, r10
    1ad4:	46 01       	movw	r8, r12
    1ad6:	06 2e       	mov	r0, r22
    1ad8:	04 c0       	rjmp	.+8      	; 0x1ae2 <_fpadd_parts+0x132>
    1ada:	96 94       	lsr	r9
    1adc:	87 94       	ror	r8
    1ade:	77 94       	ror	r7
    1ae0:	67 94       	ror	r6
    1ae2:	0a 94       	dec	r0
    1ae4:	d2 f7       	brpl	.-12     	; 0x1ada <_fpadd_parts+0x12a>
    1ae6:	21 e0       	ldi	r18, 0x01	; 1
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	04 c0       	rjmp	.+8      	; 0x1af8 <_fpadd_parts+0x148>
    1af0:	22 0f       	add	r18, r18
    1af2:	33 1f       	adc	r19, r19
    1af4:	44 1f       	adc	r20, r20
    1af6:	55 1f       	adc	r21, r21
    1af8:	6a 95       	dec	r22
    1afa:	d2 f7       	brpl	.-12     	; 0x1af0 <_fpadd_parts+0x140>
    1afc:	21 50       	subi	r18, 0x01	; 1
    1afe:	30 40       	sbci	r19, 0x00	; 0
    1b00:	40 40       	sbci	r20, 0x00	; 0
    1b02:	50 40       	sbci	r21, 0x00	; 0
    1b04:	2a 21       	and	r18, r10
    1b06:	3b 21       	and	r19, r11
    1b08:	4c 21       	and	r20, r12
    1b0a:	5d 21       	and	r21, r13
    1b0c:	21 15       	cp	r18, r1
    1b0e:	31 05       	cpc	r19, r1
    1b10:	41 05       	cpc	r20, r1
    1b12:	51 05       	cpc	r21, r1
    1b14:	21 f0       	breq	.+8      	; 0x1b1e <_fpadd_parts+0x16e>
    1b16:	21 e0       	ldi	r18, 0x01	; 1
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	59 01       	movw	r10, r18
    1b20:	6a 01       	movw	r12, r20
    1b22:	a6 28       	or	r10, r6
    1b24:	b7 28       	or	r11, r7
    1b26:	c8 28       	or	r12, r8
    1b28:	d9 28       	or	r13, r9
    1b2a:	0b c0       	rjmp	.+22     	; 0x1b42 <_fpadd_parts+0x192>
    1b2c:	82 15       	cp	r24, r2
    1b2e:	93 05       	cpc	r25, r3
    1b30:	2c f0       	brlt	.+10     	; 0x1b3c <_fpadd_parts+0x18c>
    1b32:	1c 01       	movw	r2, r24
    1b34:	aa 24       	eor	r10, r10
    1b36:	bb 24       	eor	r11, r11
    1b38:	65 01       	movw	r12, r10
    1b3a:	03 c0       	rjmp	.+6      	; 0x1b42 <_fpadd_parts+0x192>
    1b3c:	ee 24       	eor	r14, r14
    1b3e:	ff 24       	eor	r15, r15
    1b40:	87 01       	movw	r16, r14
    1b42:	11 96       	adiw	r26, 0x01	; 1
    1b44:	9c 91       	ld	r25, X
    1b46:	d2 01       	movw	r26, r4
    1b48:	11 96       	adiw	r26, 0x01	; 1
    1b4a:	8c 91       	ld	r24, X
    1b4c:	98 17       	cp	r25, r24
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <_fpadd_parts+0x1a2>
    1b50:	45 c0       	rjmp	.+138    	; 0x1bdc <_fpadd_parts+0x22c>
    1b52:	99 23       	and	r25, r25
    1b54:	39 f0       	breq	.+14     	; 0x1b64 <_fpadd_parts+0x1b4>
    1b56:	a8 01       	movw	r20, r16
    1b58:	97 01       	movw	r18, r14
    1b5a:	2a 19       	sub	r18, r10
    1b5c:	3b 09       	sbc	r19, r11
    1b5e:	4c 09       	sbc	r20, r12
    1b60:	5d 09       	sbc	r21, r13
    1b62:	06 c0       	rjmp	.+12     	; 0x1b70 <_fpadd_parts+0x1c0>
    1b64:	a6 01       	movw	r20, r12
    1b66:	95 01       	movw	r18, r10
    1b68:	2e 19       	sub	r18, r14
    1b6a:	3f 09       	sbc	r19, r15
    1b6c:	40 0b       	sbc	r20, r16
    1b6e:	51 0b       	sbc	r21, r17
    1b70:	57 fd       	sbrc	r21, 7
    1b72:	08 c0       	rjmp	.+16     	; 0x1b84 <_fpadd_parts+0x1d4>
    1b74:	11 82       	std	Z+1, r1	; 0x01
    1b76:	33 82       	std	Z+3, r3	; 0x03
    1b78:	22 82       	std	Z+2, r2	; 0x02
    1b7a:	24 83       	std	Z+4, r18	; 0x04
    1b7c:	35 83       	std	Z+5, r19	; 0x05
    1b7e:	46 83       	std	Z+6, r20	; 0x06
    1b80:	57 83       	std	Z+7, r21	; 0x07
    1b82:	1d c0       	rjmp	.+58     	; 0x1bbe <_fpadd_parts+0x20e>
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	81 83       	std	Z+1, r24	; 0x01
    1b88:	33 82       	std	Z+3, r3	; 0x03
    1b8a:	22 82       	std	Z+2, r2	; 0x02
    1b8c:	88 27       	eor	r24, r24
    1b8e:	99 27       	eor	r25, r25
    1b90:	dc 01       	movw	r26, r24
    1b92:	82 1b       	sub	r24, r18
    1b94:	93 0b       	sbc	r25, r19
    1b96:	a4 0b       	sbc	r26, r20
    1b98:	b5 0b       	sbc	r27, r21
    1b9a:	84 83       	std	Z+4, r24	; 0x04
    1b9c:	95 83       	std	Z+5, r25	; 0x05
    1b9e:	a6 83       	std	Z+6, r26	; 0x06
    1ba0:	b7 83       	std	Z+7, r27	; 0x07
    1ba2:	0d c0       	rjmp	.+26     	; 0x1bbe <_fpadd_parts+0x20e>
    1ba4:	22 0f       	add	r18, r18
    1ba6:	33 1f       	adc	r19, r19
    1ba8:	44 1f       	adc	r20, r20
    1baa:	55 1f       	adc	r21, r21
    1bac:	24 83       	std	Z+4, r18	; 0x04
    1bae:	35 83       	std	Z+5, r19	; 0x05
    1bb0:	46 83       	std	Z+6, r20	; 0x06
    1bb2:	57 83       	std	Z+7, r21	; 0x07
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	93 83       	std	Z+3, r25	; 0x03
    1bbc:	82 83       	std	Z+2, r24	; 0x02
    1bbe:	24 81       	ldd	r18, Z+4	; 0x04
    1bc0:	35 81       	ldd	r19, Z+5	; 0x05
    1bc2:	46 81       	ldd	r20, Z+6	; 0x06
    1bc4:	57 81       	ldd	r21, Z+7	; 0x07
    1bc6:	da 01       	movw	r26, r20
    1bc8:	c9 01       	movw	r24, r18
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	a1 09       	sbc	r26, r1
    1bce:	b1 09       	sbc	r27, r1
    1bd0:	8f 5f       	subi	r24, 0xFF	; 255
    1bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd4:	af 4f       	sbci	r26, 0xFF	; 255
    1bd6:	bf 43       	sbci	r27, 0x3F	; 63
    1bd8:	28 f3       	brcs	.-54     	; 0x1ba4 <_fpadd_parts+0x1f4>
    1bda:	0b c0       	rjmp	.+22     	; 0x1bf2 <_fpadd_parts+0x242>
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	33 82       	std	Z+3, r3	; 0x03
    1be0:	22 82       	std	Z+2, r2	; 0x02
    1be2:	ea 0c       	add	r14, r10
    1be4:	fb 1c       	adc	r15, r11
    1be6:	0c 1d       	adc	r16, r12
    1be8:	1d 1d       	adc	r17, r13
    1bea:	e4 82       	std	Z+4, r14	; 0x04
    1bec:	f5 82       	std	Z+5, r15	; 0x05
    1bee:	06 83       	std	Z+6, r16	; 0x06
    1bf0:	17 83       	std	Z+7, r17	; 0x07
    1bf2:	83 e0       	ldi	r24, 0x03	; 3
    1bf4:	80 83       	st	Z, r24
    1bf6:	24 81       	ldd	r18, Z+4	; 0x04
    1bf8:	35 81       	ldd	r19, Z+5	; 0x05
    1bfa:	46 81       	ldd	r20, Z+6	; 0x06
    1bfc:	57 81       	ldd	r21, Z+7	; 0x07
    1bfe:	57 ff       	sbrs	r21, 7
    1c00:	1a c0       	rjmp	.+52     	; 0x1c36 <_fpadd_parts+0x286>
    1c02:	c9 01       	movw	r24, r18
    1c04:	aa 27       	eor	r26, r26
    1c06:	97 fd       	sbrc	r25, 7
    1c08:	a0 95       	com	r26
    1c0a:	ba 2f       	mov	r27, r26
    1c0c:	81 70       	andi	r24, 0x01	; 1
    1c0e:	90 70       	andi	r25, 0x00	; 0
    1c10:	a0 70       	andi	r26, 0x00	; 0
    1c12:	b0 70       	andi	r27, 0x00	; 0
    1c14:	56 95       	lsr	r21
    1c16:	47 95       	ror	r20
    1c18:	37 95       	ror	r19
    1c1a:	27 95       	ror	r18
    1c1c:	82 2b       	or	r24, r18
    1c1e:	93 2b       	or	r25, r19
    1c20:	a4 2b       	or	r26, r20
    1c22:	b5 2b       	or	r27, r21
    1c24:	84 83       	std	Z+4, r24	; 0x04
    1c26:	95 83       	std	Z+5, r25	; 0x05
    1c28:	a6 83       	std	Z+6, r26	; 0x06
    1c2a:	b7 83       	std	Z+7, r27	; 0x07
    1c2c:	82 81       	ldd	r24, Z+2	; 0x02
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	01 96       	adiw	r24, 0x01	; 1
    1c32:	93 83       	std	Z+3, r25	; 0x03
    1c34:	82 83       	std	Z+2, r24	; 0x02
    1c36:	df 01       	movw	r26, r30
    1c38:	01 c0       	rjmp	.+2      	; 0x1c3c <_fpadd_parts+0x28c>
    1c3a:	d2 01       	movw	r26, r4
    1c3c:	cd 01       	movw	r24, r26
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	e2 e1       	ldi	r30, 0x12	; 18
    1c44:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__epilogue_restores__>

00001c48 <__subsf3>:
    1c48:	a0 e2       	ldi	r26, 0x20	; 32
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	ea e2       	ldi	r30, 0x2A	; 42
    1c4e:	fe e0       	ldi	r31, 0x0E	; 14
    1c50:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <__prologue_saves__+0x18>
    1c54:	69 83       	std	Y+1, r22	; 0x01
    1c56:	7a 83       	std	Y+2, r23	; 0x02
    1c58:	8b 83       	std	Y+3, r24	; 0x03
    1c5a:	9c 83       	std	Y+4, r25	; 0x04
    1c5c:	2d 83       	std	Y+5, r18	; 0x05
    1c5e:	3e 83       	std	Y+6, r19	; 0x06
    1c60:	4f 83       	std	Y+7, r20	; 0x07
    1c62:	58 87       	std	Y+8, r21	; 0x08
    1c64:	e9 e0       	ldi	r30, 0x09	; 9
    1c66:	ee 2e       	mov	r14, r30
    1c68:	f1 2c       	mov	r15, r1
    1c6a:	ec 0e       	add	r14, r28
    1c6c:	fd 1e       	adc	r15, r29
    1c6e:	ce 01       	movw	r24, r28
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	b7 01       	movw	r22, r14
    1c74:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__unpack_f>
    1c78:	8e 01       	movw	r16, r28
    1c7a:	0f 5e       	subi	r16, 0xEF	; 239
    1c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7e:	ce 01       	movw	r24, r28
    1c80:	05 96       	adiw	r24, 0x05	; 5
    1c82:	b8 01       	movw	r22, r16
    1c84:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__unpack_f>
    1c88:	8a 89       	ldd	r24, Y+18	; 0x12
    1c8a:	91 e0       	ldi	r25, 0x01	; 1
    1c8c:	89 27       	eor	r24, r25
    1c8e:	8a 8b       	std	Y+18, r24	; 0x12
    1c90:	c7 01       	movw	r24, r14
    1c92:	b8 01       	movw	r22, r16
    1c94:	ae 01       	movw	r20, r28
    1c96:	47 5e       	subi	r20, 0xE7	; 231
    1c98:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9a:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_fpadd_parts>
    1c9e:	0e 94 0d 11 	call	0x221a	; 0x221a <__pack_f>
    1ca2:	a0 96       	adiw	r28, 0x20	; 32
    1ca4:	e6 e0       	ldi	r30, 0x06	; 6
    1ca6:	0c 94 02 13 	jmp	0x2604	; 0x2604 <__epilogue_restores__+0x18>

00001caa <__addsf3>:
    1caa:	a0 e2       	ldi	r26, 0x20	; 32
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	eb e5       	ldi	r30, 0x5B	; 91
    1cb0:	fe e0       	ldi	r31, 0x0E	; 14
    1cb2:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <__prologue_saves__+0x18>
    1cb6:	69 83       	std	Y+1, r22	; 0x01
    1cb8:	7a 83       	std	Y+2, r23	; 0x02
    1cba:	8b 83       	std	Y+3, r24	; 0x03
    1cbc:	9c 83       	std	Y+4, r25	; 0x04
    1cbe:	2d 83       	std	Y+5, r18	; 0x05
    1cc0:	3e 83       	std	Y+6, r19	; 0x06
    1cc2:	4f 83       	std	Y+7, r20	; 0x07
    1cc4:	58 87       	std	Y+8, r21	; 0x08
    1cc6:	f9 e0       	ldi	r31, 0x09	; 9
    1cc8:	ef 2e       	mov	r14, r31
    1cca:	f1 2c       	mov	r15, r1
    1ccc:	ec 0e       	add	r14, r28
    1cce:	fd 1e       	adc	r15, r29
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	01 96       	adiw	r24, 0x01	; 1
    1cd4:	b7 01       	movw	r22, r14
    1cd6:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__unpack_f>
    1cda:	8e 01       	movw	r16, r28
    1cdc:	0f 5e       	subi	r16, 0xEF	; 239
    1cde:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	05 96       	adiw	r24, 0x05	; 5
    1ce4:	b8 01       	movw	r22, r16
    1ce6:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__unpack_f>
    1cea:	c7 01       	movw	r24, r14
    1cec:	b8 01       	movw	r22, r16
    1cee:	ae 01       	movw	r20, r28
    1cf0:	47 5e       	subi	r20, 0xE7	; 231
    1cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf4:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <_fpadd_parts>
    1cf8:	0e 94 0d 11 	call	0x221a	; 0x221a <__pack_f>
    1cfc:	a0 96       	adiw	r28, 0x20	; 32
    1cfe:	e6 e0       	ldi	r30, 0x06	; 6
    1d00:	0c 94 02 13 	jmp	0x2604	; 0x2604 <__epilogue_restores__+0x18>

00001d04 <__mulsf3>:
    1d04:	a0 e2       	ldi	r26, 0x20	; 32
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e8 e8       	ldi	r30, 0x88	; 136
    1d0a:	fe e0       	ldi	r31, 0x0E	; 14
    1d0c:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__prologue_saves__>
    1d10:	69 83       	std	Y+1, r22	; 0x01
    1d12:	7a 83       	std	Y+2, r23	; 0x02
    1d14:	8b 83       	std	Y+3, r24	; 0x03
    1d16:	9c 83       	std	Y+4, r25	; 0x04
    1d18:	2d 83       	std	Y+5, r18	; 0x05
    1d1a:	3e 83       	std	Y+6, r19	; 0x06
    1d1c:	4f 83       	std	Y+7, r20	; 0x07
    1d1e:	58 87       	std	Y+8, r21	; 0x08
    1d20:	ce 01       	movw	r24, r28
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	be 01       	movw	r22, r28
    1d26:	67 5f       	subi	r22, 0xF7	; 247
    1d28:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__unpack_f>
    1d2e:	ce 01       	movw	r24, r28
    1d30:	05 96       	adiw	r24, 0x05	; 5
    1d32:	be 01       	movw	r22, r28
    1d34:	6f 5e       	subi	r22, 0xEF	; 239
    1d36:	7f 4f       	sbci	r23, 0xFF	; 255
    1d38:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__unpack_f>
    1d3c:	99 85       	ldd	r25, Y+9	; 0x09
    1d3e:	92 30       	cpi	r25, 0x02	; 2
    1d40:	88 f0       	brcs	.+34     	; 0x1d64 <__mulsf3+0x60>
    1d42:	89 89       	ldd	r24, Y+17	; 0x11
    1d44:	82 30       	cpi	r24, 0x02	; 2
    1d46:	c8 f0       	brcs	.+50     	; 0x1d7a <__mulsf3+0x76>
    1d48:	94 30       	cpi	r25, 0x04	; 4
    1d4a:	19 f4       	brne	.+6      	; 0x1d52 <__mulsf3+0x4e>
    1d4c:	82 30       	cpi	r24, 0x02	; 2
    1d4e:	51 f4       	brne	.+20     	; 0x1d64 <__mulsf3+0x60>
    1d50:	04 c0       	rjmp	.+8      	; 0x1d5a <__mulsf3+0x56>
    1d52:	84 30       	cpi	r24, 0x04	; 4
    1d54:	29 f4       	brne	.+10     	; 0x1d60 <__mulsf3+0x5c>
    1d56:	92 30       	cpi	r25, 0x02	; 2
    1d58:	81 f4       	brne	.+32     	; 0x1d7a <__mulsf3+0x76>
    1d5a:	80 e6       	ldi	r24, 0x60	; 96
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	c6 c0       	rjmp	.+396    	; 0x1eec <__mulsf3+0x1e8>
    1d60:	92 30       	cpi	r25, 0x02	; 2
    1d62:	49 f4       	brne	.+18     	; 0x1d76 <__mulsf3+0x72>
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d68:	8a 89       	ldd	r24, Y+18	; 0x12
    1d6a:	98 13       	cpse	r25, r24
    1d6c:	21 e0       	ldi	r18, 0x01	; 1
    1d6e:	2a 87       	std	Y+10, r18	; 0x0a
    1d70:	ce 01       	movw	r24, r28
    1d72:	09 96       	adiw	r24, 0x09	; 9
    1d74:	bb c0       	rjmp	.+374    	; 0x1eec <__mulsf3+0x1e8>
    1d76:	82 30       	cpi	r24, 0x02	; 2
    1d78:	49 f4       	brne	.+18     	; 0x1d8c <__mulsf3+0x88>
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7e:	8a 89       	ldd	r24, Y+18	; 0x12
    1d80:	98 13       	cpse	r25, r24
    1d82:	21 e0       	ldi	r18, 0x01	; 1
    1d84:	2a 8b       	std	Y+18, r18	; 0x12
    1d86:	ce 01       	movw	r24, r28
    1d88:	41 96       	adiw	r24, 0x11	; 17
    1d8a:	b0 c0       	rjmp	.+352    	; 0x1eec <__mulsf3+0x1e8>
    1d8c:	2d 84       	ldd	r2, Y+13	; 0x0d
    1d8e:	3e 84       	ldd	r3, Y+14	; 0x0e
    1d90:	4f 84       	ldd	r4, Y+15	; 0x0f
    1d92:	58 88       	ldd	r5, Y+16	; 0x10
    1d94:	6d 88       	ldd	r6, Y+21	; 0x15
    1d96:	7e 88       	ldd	r7, Y+22	; 0x16
    1d98:	8f 88       	ldd	r8, Y+23	; 0x17
    1d9a:	98 8c       	ldd	r9, Y+24	; 0x18
    1d9c:	ee 24       	eor	r14, r14
    1d9e:	ff 24       	eor	r15, r15
    1da0:	87 01       	movw	r16, r14
    1da2:	aa 24       	eor	r10, r10
    1da4:	bb 24       	eor	r11, r11
    1da6:	65 01       	movw	r12, r10
    1da8:	40 e0       	ldi	r20, 0x00	; 0
    1daa:	50 e0       	ldi	r21, 0x00	; 0
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	70 e0       	ldi	r23, 0x00	; 0
    1db0:	e0 e0       	ldi	r30, 0x00	; 0
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	c1 01       	movw	r24, r2
    1db6:	81 70       	andi	r24, 0x01	; 1
    1db8:	90 70       	andi	r25, 0x00	; 0
    1dba:	89 2b       	or	r24, r25
    1dbc:	e9 f0       	breq	.+58     	; 0x1df8 <__mulsf3+0xf4>
    1dbe:	e6 0c       	add	r14, r6
    1dc0:	f7 1c       	adc	r15, r7
    1dc2:	08 1d       	adc	r16, r8
    1dc4:	19 1d       	adc	r17, r9
    1dc6:	9a 01       	movw	r18, r20
    1dc8:	ab 01       	movw	r20, r22
    1dca:	2a 0d       	add	r18, r10
    1dcc:	3b 1d       	adc	r19, r11
    1dce:	4c 1d       	adc	r20, r12
    1dd0:	5d 1d       	adc	r21, r13
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a0 e0       	ldi	r26, 0x00	; 0
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e6 14       	cp	r14, r6
    1ddc:	f7 04       	cpc	r15, r7
    1dde:	08 05       	cpc	r16, r8
    1de0:	19 05       	cpc	r17, r9
    1de2:	20 f4       	brcc	.+8      	; 0x1dec <__mulsf3+0xe8>
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	a0 e0       	ldi	r26, 0x00	; 0
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	ba 01       	movw	r22, r20
    1dee:	a9 01       	movw	r20, r18
    1df0:	48 0f       	add	r20, r24
    1df2:	59 1f       	adc	r21, r25
    1df4:	6a 1f       	adc	r22, r26
    1df6:	7b 1f       	adc	r23, r27
    1df8:	aa 0c       	add	r10, r10
    1dfa:	bb 1c       	adc	r11, r11
    1dfc:	cc 1c       	adc	r12, r12
    1dfe:	dd 1c       	adc	r13, r13
    1e00:	97 fe       	sbrs	r9, 7
    1e02:	08 c0       	rjmp	.+16     	; 0x1e14 <__mulsf3+0x110>
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	a0 e0       	ldi	r26, 0x00	; 0
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	a8 2a       	or	r10, r24
    1e0e:	b9 2a       	or	r11, r25
    1e10:	ca 2a       	or	r12, r26
    1e12:	db 2a       	or	r13, r27
    1e14:	31 96       	adiw	r30, 0x01	; 1
    1e16:	e0 32       	cpi	r30, 0x20	; 32
    1e18:	f1 05       	cpc	r31, r1
    1e1a:	49 f0       	breq	.+18     	; 0x1e2e <__mulsf3+0x12a>
    1e1c:	66 0c       	add	r6, r6
    1e1e:	77 1c       	adc	r7, r7
    1e20:	88 1c       	adc	r8, r8
    1e22:	99 1c       	adc	r9, r9
    1e24:	56 94       	lsr	r5
    1e26:	47 94       	ror	r4
    1e28:	37 94       	ror	r3
    1e2a:	27 94       	ror	r2
    1e2c:	c3 cf       	rjmp	.-122    	; 0x1db4 <__mulsf3+0xb0>
    1e2e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1e30:	ea 89       	ldd	r30, Y+18	; 0x12
    1e32:	2b 89       	ldd	r18, Y+19	; 0x13
    1e34:	3c 89       	ldd	r19, Y+20	; 0x14
    1e36:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e38:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e3a:	28 0f       	add	r18, r24
    1e3c:	39 1f       	adc	r19, r25
    1e3e:	2e 5f       	subi	r18, 0xFE	; 254
    1e40:	3f 4f       	sbci	r19, 0xFF	; 255
    1e42:	17 c0       	rjmp	.+46     	; 0x1e72 <__mulsf3+0x16e>
    1e44:	ca 01       	movw	r24, r20
    1e46:	81 70       	andi	r24, 0x01	; 1
    1e48:	90 70       	andi	r25, 0x00	; 0
    1e4a:	89 2b       	or	r24, r25
    1e4c:	61 f0       	breq	.+24     	; 0x1e66 <__mulsf3+0x162>
    1e4e:	16 95       	lsr	r17
    1e50:	07 95       	ror	r16
    1e52:	f7 94       	ror	r15
    1e54:	e7 94       	ror	r14
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	a0 e0       	ldi	r26, 0x00	; 0
    1e5c:	b0 e8       	ldi	r27, 0x80	; 128
    1e5e:	e8 2a       	or	r14, r24
    1e60:	f9 2a       	or	r15, r25
    1e62:	0a 2b       	or	r16, r26
    1e64:	1b 2b       	or	r17, r27
    1e66:	76 95       	lsr	r23
    1e68:	67 95       	ror	r22
    1e6a:	57 95       	ror	r21
    1e6c:	47 95       	ror	r20
    1e6e:	2f 5f       	subi	r18, 0xFF	; 255
    1e70:	3f 4f       	sbci	r19, 0xFF	; 255
    1e72:	77 fd       	sbrc	r23, 7
    1e74:	e7 cf       	rjmp	.-50     	; 0x1e44 <__mulsf3+0x140>
    1e76:	0c c0       	rjmp	.+24     	; 0x1e90 <__mulsf3+0x18c>
    1e78:	44 0f       	add	r20, r20
    1e7a:	55 1f       	adc	r21, r21
    1e7c:	66 1f       	adc	r22, r22
    1e7e:	77 1f       	adc	r23, r23
    1e80:	17 fd       	sbrc	r17, 7
    1e82:	41 60       	ori	r20, 0x01	; 1
    1e84:	ee 0c       	add	r14, r14
    1e86:	ff 1c       	adc	r15, r15
    1e88:	00 1f       	adc	r16, r16
    1e8a:	11 1f       	adc	r17, r17
    1e8c:	21 50       	subi	r18, 0x01	; 1
    1e8e:	30 40       	sbci	r19, 0x00	; 0
    1e90:	40 30       	cpi	r20, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	59 07       	cpc	r21, r25
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	69 07       	cpc	r22, r25
    1e9a:	90 e4       	ldi	r25, 0x40	; 64
    1e9c:	79 07       	cpc	r23, r25
    1e9e:	60 f3       	brcs	.-40     	; 0x1e78 <__mulsf3+0x174>
    1ea0:	2b 8f       	std	Y+27, r18	; 0x1b
    1ea2:	3c 8f       	std	Y+28, r19	; 0x1c
    1ea4:	db 01       	movw	r26, r22
    1ea6:	ca 01       	movw	r24, r20
    1ea8:	8f 77       	andi	r24, 0x7F	; 127
    1eaa:	90 70       	andi	r25, 0x00	; 0
    1eac:	a0 70       	andi	r26, 0x00	; 0
    1eae:	b0 70       	andi	r27, 0x00	; 0
    1eb0:	80 34       	cpi	r24, 0x40	; 64
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	a1 05       	cpc	r26, r1
    1eb6:	b1 05       	cpc	r27, r1
    1eb8:	61 f4       	brne	.+24     	; 0x1ed2 <__mulsf3+0x1ce>
    1eba:	47 fd       	sbrc	r20, 7
    1ebc:	0a c0       	rjmp	.+20     	; 0x1ed2 <__mulsf3+0x1ce>
    1ebe:	e1 14       	cp	r14, r1
    1ec0:	f1 04       	cpc	r15, r1
    1ec2:	01 05       	cpc	r16, r1
    1ec4:	11 05       	cpc	r17, r1
    1ec6:	29 f0       	breq	.+10     	; 0x1ed2 <__mulsf3+0x1ce>
    1ec8:	40 5c       	subi	r20, 0xC0	; 192
    1eca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ecc:	6f 4f       	sbci	r22, 0xFF	; 255
    1ece:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed0:	40 78       	andi	r20, 0x80	; 128
    1ed2:	1a 8e       	std	Y+26, r1	; 0x1a
    1ed4:	fe 17       	cp	r31, r30
    1ed6:	11 f0       	breq	.+4      	; 0x1edc <__mulsf3+0x1d8>
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	8a 8f       	std	Y+26, r24	; 0x1a
    1edc:	4d 8f       	std	Y+29, r20	; 0x1d
    1ede:	5e 8f       	std	Y+30, r21	; 0x1e
    1ee0:	6f 8f       	std	Y+31, r22	; 0x1f
    1ee2:	78 a3       	std	Y+32, r23	; 0x20
    1ee4:	83 e0       	ldi	r24, 0x03	; 3
    1ee6:	89 8f       	std	Y+25, r24	; 0x19
    1ee8:	ce 01       	movw	r24, r28
    1eea:	49 96       	adiw	r24, 0x19	; 25
    1eec:	0e 94 0d 11 	call	0x221a	; 0x221a <__pack_f>
    1ef0:	a0 96       	adiw	r28, 0x20	; 32
    1ef2:	e2 e1       	ldi	r30, 0x12	; 18
    1ef4:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__epilogue_restores__>

00001ef8 <__gtsf2>:
    1ef8:	a8 e1       	ldi	r26, 0x18	; 24
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e2 e8       	ldi	r30, 0x82	; 130
    1efe:	ff e0       	ldi	r31, 0x0F	; 15
    1f00:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <__prologue_saves__+0x18>
    1f04:	69 83       	std	Y+1, r22	; 0x01
    1f06:	7a 83       	std	Y+2, r23	; 0x02
    1f08:	8b 83       	std	Y+3, r24	; 0x03
    1f0a:	9c 83       	std	Y+4, r25	; 0x04
    1f0c:	2d 83       	std	Y+5, r18	; 0x05
    1f0e:	3e 83       	std	Y+6, r19	; 0x06
    1f10:	4f 83       	std	Y+7, r20	; 0x07
    1f12:	58 87       	std	Y+8, r21	; 0x08
    1f14:	89 e0       	ldi	r24, 0x09	; 9
    1f16:	e8 2e       	mov	r14, r24
    1f18:	f1 2c       	mov	r15, r1
    1f1a:	ec 0e       	add	r14, r28
    1f1c:	fd 1e       	adc	r15, r29
    1f1e:	ce 01       	movw	r24, r28
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	b7 01       	movw	r22, r14
    1f24:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__unpack_f>
    1f28:	8e 01       	movw	r16, r28
    1f2a:	0f 5e       	subi	r16, 0xEF	; 239
    1f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2e:	ce 01       	movw	r24, r28
    1f30:	05 96       	adiw	r24, 0x05	; 5
    1f32:	b8 01       	movw	r22, r16
    1f34:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__unpack_f>
    1f38:	89 85       	ldd	r24, Y+9	; 0x09
    1f3a:	82 30       	cpi	r24, 0x02	; 2
    1f3c:	40 f0       	brcs	.+16     	; 0x1f4e <__gtsf2+0x56>
    1f3e:	89 89       	ldd	r24, Y+17	; 0x11
    1f40:	82 30       	cpi	r24, 0x02	; 2
    1f42:	28 f0       	brcs	.+10     	; 0x1f4e <__gtsf2+0x56>
    1f44:	c7 01       	movw	r24, r14
    1f46:	b8 01       	movw	r22, r16
    1f48:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__fpcmp_parts_f>
    1f4c:	01 c0       	rjmp	.+2      	; 0x1f50 <__gtsf2+0x58>
    1f4e:	8f ef       	ldi	r24, 0xFF	; 255
    1f50:	68 96       	adiw	r28, 0x18	; 24
    1f52:	e6 e0       	ldi	r30, 0x06	; 6
    1f54:	0c 94 02 13 	jmp	0x2604	; 0x2604 <__epilogue_restores__+0x18>

00001f58 <__gesf2>:
    1f58:	a8 e1       	ldi	r26, 0x18	; 24
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e2 eb       	ldi	r30, 0xB2	; 178
    1f5e:	ff e0       	ldi	r31, 0x0F	; 15
    1f60:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <__prologue_saves__+0x18>
    1f64:	69 83       	std	Y+1, r22	; 0x01
    1f66:	7a 83       	std	Y+2, r23	; 0x02
    1f68:	8b 83       	std	Y+3, r24	; 0x03
    1f6a:	9c 83       	std	Y+4, r25	; 0x04
    1f6c:	2d 83       	std	Y+5, r18	; 0x05
    1f6e:	3e 83       	std	Y+6, r19	; 0x06
    1f70:	4f 83       	std	Y+7, r20	; 0x07
    1f72:	58 87       	std	Y+8, r21	; 0x08
    1f74:	89 e0       	ldi	r24, 0x09	; 9
    1f76:	e8 2e       	mov	r14, r24
    1f78:	f1 2c       	mov	r15, r1
    1f7a:	ec 0e       	add	r14, r28
    1f7c:	fd 1e       	adc	r15, r29
    1f7e:	ce 01       	movw	r24, r28
    1f80:	01 96       	adiw	r24, 0x01	; 1
    1f82:	b7 01       	movw	r22, r14
    1f84:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__unpack_f>
    1f88:	8e 01       	movw	r16, r28
    1f8a:	0f 5e       	subi	r16, 0xEF	; 239
    1f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8e:	ce 01       	movw	r24, r28
    1f90:	05 96       	adiw	r24, 0x05	; 5
    1f92:	b8 01       	movw	r22, r16
    1f94:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__unpack_f>
    1f98:	89 85       	ldd	r24, Y+9	; 0x09
    1f9a:	82 30       	cpi	r24, 0x02	; 2
    1f9c:	40 f0       	brcs	.+16     	; 0x1fae <__gesf2+0x56>
    1f9e:	89 89       	ldd	r24, Y+17	; 0x11
    1fa0:	82 30       	cpi	r24, 0x02	; 2
    1fa2:	28 f0       	brcs	.+10     	; 0x1fae <__gesf2+0x56>
    1fa4:	c7 01       	movw	r24, r14
    1fa6:	b8 01       	movw	r22, r16
    1fa8:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__fpcmp_parts_f>
    1fac:	01 c0       	rjmp	.+2      	; 0x1fb0 <__gesf2+0x58>
    1fae:	8f ef       	ldi	r24, 0xFF	; 255
    1fb0:	68 96       	adiw	r28, 0x18	; 24
    1fb2:	e6 e0       	ldi	r30, 0x06	; 6
    1fb4:	0c 94 02 13 	jmp	0x2604	; 0x2604 <__epilogue_restores__+0x18>

00001fb8 <__ltsf2>:
    1fb8:	a8 e1       	ldi	r26, 0x18	; 24
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e2 ee       	ldi	r30, 0xE2	; 226
    1fbe:	ff e0       	ldi	r31, 0x0F	; 15
    1fc0:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <__prologue_saves__+0x18>
    1fc4:	69 83       	std	Y+1, r22	; 0x01
    1fc6:	7a 83       	std	Y+2, r23	; 0x02
    1fc8:	8b 83       	std	Y+3, r24	; 0x03
    1fca:	9c 83       	std	Y+4, r25	; 0x04
    1fcc:	2d 83       	std	Y+5, r18	; 0x05
    1fce:	3e 83       	std	Y+6, r19	; 0x06
    1fd0:	4f 83       	std	Y+7, r20	; 0x07
    1fd2:	58 87       	std	Y+8, r21	; 0x08
    1fd4:	89 e0       	ldi	r24, 0x09	; 9
    1fd6:	e8 2e       	mov	r14, r24
    1fd8:	f1 2c       	mov	r15, r1
    1fda:	ec 0e       	add	r14, r28
    1fdc:	fd 1e       	adc	r15, r29
    1fde:	ce 01       	movw	r24, r28
    1fe0:	01 96       	adiw	r24, 0x01	; 1
    1fe2:	b7 01       	movw	r22, r14
    1fe4:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__unpack_f>
    1fe8:	8e 01       	movw	r16, r28
    1fea:	0f 5e       	subi	r16, 0xEF	; 239
    1fec:	1f 4f       	sbci	r17, 0xFF	; 255
    1fee:	ce 01       	movw	r24, r28
    1ff0:	05 96       	adiw	r24, 0x05	; 5
    1ff2:	b8 01       	movw	r22, r16
    1ff4:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__unpack_f>
    1ff8:	89 85       	ldd	r24, Y+9	; 0x09
    1ffa:	82 30       	cpi	r24, 0x02	; 2
    1ffc:	40 f0       	brcs	.+16     	; 0x200e <__ltsf2+0x56>
    1ffe:	89 89       	ldd	r24, Y+17	; 0x11
    2000:	82 30       	cpi	r24, 0x02	; 2
    2002:	28 f0       	brcs	.+10     	; 0x200e <__ltsf2+0x56>
    2004:	c7 01       	movw	r24, r14
    2006:	b8 01       	movw	r22, r16
    2008:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__fpcmp_parts_f>
    200c:	01 c0       	rjmp	.+2      	; 0x2010 <__ltsf2+0x58>
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	68 96       	adiw	r28, 0x18	; 24
    2012:	e6 e0       	ldi	r30, 0x06	; 6
    2014:	0c 94 02 13 	jmp	0x2604	; 0x2604 <__epilogue_restores__+0x18>

00002018 <__floatsisf>:
    2018:	a8 e0       	ldi	r26, 0x08	; 8
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e2 e1       	ldi	r30, 0x12	; 18
    201e:	f0 e1       	ldi	r31, 0x10	; 16
    2020:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__prologue_saves__+0x12>
    2024:	9b 01       	movw	r18, r22
    2026:	ac 01       	movw	r20, r24
    2028:	83 e0       	ldi	r24, 0x03	; 3
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	da 01       	movw	r26, r20
    202e:	c9 01       	movw	r24, r18
    2030:	88 27       	eor	r24, r24
    2032:	b7 fd       	sbrc	r27, 7
    2034:	83 95       	inc	r24
    2036:	99 27       	eor	r25, r25
    2038:	aa 27       	eor	r26, r26
    203a:	bb 27       	eor	r27, r27
    203c:	b8 2e       	mov	r11, r24
    203e:	21 15       	cp	r18, r1
    2040:	31 05       	cpc	r19, r1
    2042:	41 05       	cpc	r20, r1
    2044:	51 05       	cpc	r21, r1
    2046:	19 f4       	brne	.+6      	; 0x204e <__floatsisf+0x36>
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	3a c0       	rjmp	.+116    	; 0x20c2 <__floatsisf+0xaa>
    204e:	88 23       	and	r24, r24
    2050:	a9 f0       	breq	.+42     	; 0x207c <__floatsisf+0x64>
    2052:	20 30       	cpi	r18, 0x00	; 0
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	38 07       	cpc	r19, r24
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	48 07       	cpc	r20, r24
    205c:	80 e8       	ldi	r24, 0x80	; 128
    205e:	58 07       	cpc	r21, r24
    2060:	29 f4       	brne	.+10     	; 0x206c <__floatsisf+0x54>
    2062:	60 e0       	ldi	r22, 0x00	; 0
    2064:	70 e0       	ldi	r23, 0x00	; 0
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	9f ec       	ldi	r25, 0xCF	; 207
    206a:	30 c0       	rjmp	.+96     	; 0x20cc <__floatsisf+0xb4>
    206c:	ee 24       	eor	r14, r14
    206e:	ff 24       	eor	r15, r15
    2070:	87 01       	movw	r16, r14
    2072:	e2 1a       	sub	r14, r18
    2074:	f3 0a       	sbc	r15, r19
    2076:	04 0b       	sbc	r16, r20
    2078:	15 0b       	sbc	r17, r21
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <__floatsisf+0x68>
    207c:	79 01       	movw	r14, r18
    207e:	8a 01       	movw	r16, r20
    2080:	8e e1       	ldi	r24, 0x1E	; 30
    2082:	c8 2e       	mov	r12, r24
    2084:	d1 2c       	mov	r13, r1
    2086:	dc 82       	std	Y+4, r13	; 0x04
    2088:	cb 82       	std	Y+3, r12	; 0x03
    208a:	ed 82       	std	Y+5, r14	; 0x05
    208c:	fe 82       	std	Y+6, r15	; 0x06
    208e:	0f 83       	std	Y+7, r16	; 0x07
    2090:	18 87       	std	Y+8, r17	; 0x08
    2092:	c8 01       	movw	r24, r16
    2094:	b7 01       	movw	r22, r14
    2096:	0e 94 be 10 	call	0x217c	; 0x217c <__clzsi2>
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	18 16       	cp	r1, r24
    209e:	19 06       	cpc	r1, r25
    20a0:	84 f4       	brge	.+32     	; 0x20c2 <__floatsisf+0xaa>
    20a2:	08 2e       	mov	r0, r24
    20a4:	04 c0       	rjmp	.+8      	; 0x20ae <__floatsisf+0x96>
    20a6:	ee 0c       	add	r14, r14
    20a8:	ff 1c       	adc	r15, r15
    20aa:	00 1f       	adc	r16, r16
    20ac:	11 1f       	adc	r17, r17
    20ae:	0a 94       	dec	r0
    20b0:	d2 f7       	brpl	.-12     	; 0x20a6 <__floatsisf+0x8e>
    20b2:	ed 82       	std	Y+5, r14	; 0x05
    20b4:	fe 82       	std	Y+6, r15	; 0x06
    20b6:	0f 83       	std	Y+7, r16	; 0x07
    20b8:	18 87       	std	Y+8, r17	; 0x08
    20ba:	c8 1a       	sub	r12, r24
    20bc:	d9 0a       	sbc	r13, r25
    20be:	dc 82       	std	Y+4, r13	; 0x04
    20c0:	cb 82       	std	Y+3, r12	; 0x03
    20c2:	ba 82       	std	Y+2, r11	; 0x02
    20c4:	ce 01       	movw	r24, r28
    20c6:	01 96       	adiw	r24, 0x01	; 1
    20c8:	0e 94 0d 11 	call	0x221a	; 0x221a <__pack_f>
    20cc:	28 96       	adiw	r28, 0x08	; 8
    20ce:	e9 e0       	ldi	r30, 0x09	; 9
    20d0:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__epilogue_restores__+0x12>

000020d4 <__fixsfsi>:
    20d4:	ac e0       	ldi	r26, 0x0C	; 12
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e0 e7       	ldi	r30, 0x70	; 112
    20da:	f0 e1       	ldi	r31, 0x10	; 16
    20dc:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__prologue_saves__+0x20>
    20e0:	69 83       	std	Y+1, r22	; 0x01
    20e2:	7a 83       	std	Y+2, r23	; 0x02
    20e4:	8b 83       	std	Y+3, r24	; 0x03
    20e6:	9c 83       	std	Y+4, r25	; 0x04
    20e8:	ce 01       	movw	r24, r28
    20ea:	01 96       	adiw	r24, 0x01	; 1
    20ec:	be 01       	movw	r22, r28
    20ee:	6b 5f       	subi	r22, 0xFB	; 251
    20f0:	7f 4f       	sbci	r23, 0xFF	; 255
    20f2:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__unpack_f>
    20f6:	8d 81       	ldd	r24, Y+5	; 0x05
    20f8:	82 30       	cpi	r24, 0x02	; 2
    20fa:	61 f1       	breq	.+88     	; 0x2154 <__fixsfsi+0x80>
    20fc:	82 30       	cpi	r24, 0x02	; 2
    20fe:	50 f1       	brcs	.+84     	; 0x2154 <__fixsfsi+0x80>
    2100:	84 30       	cpi	r24, 0x04	; 4
    2102:	21 f4       	brne	.+8      	; 0x210c <__fixsfsi+0x38>
    2104:	8e 81       	ldd	r24, Y+6	; 0x06
    2106:	88 23       	and	r24, r24
    2108:	51 f1       	breq	.+84     	; 0x215e <__fixsfsi+0x8a>
    210a:	2e c0       	rjmp	.+92     	; 0x2168 <__fixsfsi+0x94>
    210c:	2f 81       	ldd	r18, Y+7	; 0x07
    210e:	38 85       	ldd	r19, Y+8	; 0x08
    2110:	37 fd       	sbrc	r19, 7
    2112:	20 c0       	rjmp	.+64     	; 0x2154 <__fixsfsi+0x80>
    2114:	6e 81       	ldd	r22, Y+6	; 0x06
    2116:	2f 31       	cpi	r18, 0x1F	; 31
    2118:	31 05       	cpc	r19, r1
    211a:	1c f0       	brlt	.+6      	; 0x2122 <__fixsfsi+0x4e>
    211c:	66 23       	and	r22, r22
    211e:	f9 f0       	breq	.+62     	; 0x215e <__fixsfsi+0x8a>
    2120:	23 c0       	rjmp	.+70     	; 0x2168 <__fixsfsi+0x94>
    2122:	8e e1       	ldi	r24, 0x1E	; 30
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	82 1b       	sub	r24, r18
    2128:	93 0b       	sbc	r25, r19
    212a:	29 85       	ldd	r18, Y+9	; 0x09
    212c:	3a 85       	ldd	r19, Y+10	; 0x0a
    212e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2130:	5c 85       	ldd	r21, Y+12	; 0x0c
    2132:	04 c0       	rjmp	.+8      	; 0x213c <__fixsfsi+0x68>
    2134:	56 95       	lsr	r21
    2136:	47 95       	ror	r20
    2138:	37 95       	ror	r19
    213a:	27 95       	ror	r18
    213c:	8a 95       	dec	r24
    213e:	d2 f7       	brpl	.-12     	; 0x2134 <__fixsfsi+0x60>
    2140:	66 23       	and	r22, r22
    2142:	b1 f0       	breq	.+44     	; 0x2170 <__fixsfsi+0x9c>
    2144:	50 95       	com	r21
    2146:	40 95       	com	r20
    2148:	30 95       	com	r19
    214a:	21 95       	neg	r18
    214c:	3f 4f       	sbci	r19, 0xFF	; 255
    214e:	4f 4f       	sbci	r20, 0xFF	; 255
    2150:	5f 4f       	sbci	r21, 0xFF	; 255
    2152:	0e c0       	rjmp	.+28     	; 0x2170 <__fixsfsi+0x9c>
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e0       	ldi	r20, 0x00	; 0
    215a:	50 e0       	ldi	r21, 0x00	; 0
    215c:	09 c0       	rjmp	.+18     	; 0x2170 <__fixsfsi+0x9c>
    215e:	2f ef       	ldi	r18, 0xFF	; 255
    2160:	3f ef       	ldi	r19, 0xFF	; 255
    2162:	4f ef       	ldi	r20, 0xFF	; 255
    2164:	5f e7       	ldi	r21, 0x7F	; 127
    2166:	04 c0       	rjmp	.+8      	; 0x2170 <__fixsfsi+0x9c>
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e0       	ldi	r20, 0x00	; 0
    216e:	50 e8       	ldi	r21, 0x80	; 128
    2170:	b9 01       	movw	r22, r18
    2172:	ca 01       	movw	r24, r20
    2174:	2c 96       	adiw	r28, 0x0c	; 12
    2176:	e2 e0       	ldi	r30, 0x02	; 2
    2178:	0c 94 06 13 	jmp	0x260c	; 0x260c <__epilogue_restores__+0x20>

0000217c <__clzsi2>:
    217c:	ef 92       	push	r14
    217e:	ff 92       	push	r15
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	7b 01       	movw	r14, r22
    2186:	8c 01       	movw	r16, r24
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	e8 16       	cp	r14, r24
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	f8 06       	cpc	r15, r24
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	08 07       	cpc	r16, r24
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	18 07       	cpc	r17, r24
    2198:	88 f4       	brcc	.+34     	; 0x21bc <__clzsi2+0x40>
    219a:	8f ef       	ldi	r24, 0xFF	; 255
    219c:	e8 16       	cp	r14, r24
    219e:	f1 04       	cpc	r15, r1
    21a0:	01 05       	cpc	r16, r1
    21a2:	11 05       	cpc	r17, r1
    21a4:	31 f0       	breq	.+12     	; 0x21b2 <__clzsi2+0x36>
    21a6:	28 f0       	brcs	.+10     	; 0x21b2 <__clzsi2+0x36>
    21a8:	88 e0       	ldi	r24, 0x08	; 8
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	a0 e0       	ldi	r26, 0x00	; 0
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	17 c0       	rjmp	.+46     	; 0x21e0 <__clzsi2+0x64>
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	a0 e0       	ldi	r26, 0x00	; 0
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	12 c0       	rjmp	.+36     	; 0x21e0 <__clzsi2+0x64>
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	e8 16       	cp	r14, r24
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	f8 06       	cpc	r15, r24
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	08 07       	cpc	r16, r24
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	18 07       	cpc	r17, r24
    21cc:	28 f0       	brcs	.+10     	; 0x21d8 <__clzsi2+0x5c>
    21ce:	88 e1       	ldi	r24, 0x18	; 24
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	a0 e0       	ldi	r26, 0x00	; 0
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	04 c0       	rjmp	.+8      	; 0x21e0 <__clzsi2+0x64>
    21d8:	80 e1       	ldi	r24, 0x10	; 16
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	a0 e0       	ldi	r26, 0x00	; 0
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	20 e2       	ldi	r18, 0x20	; 32
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	50 e0       	ldi	r21, 0x00	; 0
    21e8:	28 1b       	sub	r18, r24
    21ea:	39 0b       	sbc	r19, r25
    21ec:	4a 0b       	sbc	r20, r26
    21ee:	5b 0b       	sbc	r21, r27
    21f0:	04 c0       	rjmp	.+8      	; 0x21fa <__clzsi2+0x7e>
    21f2:	16 95       	lsr	r17
    21f4:	07 95       	ror	r16
    21f6:	f7 94       	ror	r15
    21f8:	e7 94       	ror	r14
    21fa:	8a 95       	dec	r24
    21fc:	d2 f7       	brpl	.-12     	; 0x21f2 <__clzsi2+0x76>
    21fe:	f7 01       	movw	r30, r14
    2200:	e8 59       	subi	r30, 0x98	; 152
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	80 81       	ld	r24, Z
    2206:	28 1b       	sub	r18, r24
    2208:	31 09       	sbc	r19, r1
    220a:	41 09       	sbc	r20, r1
    220c:	51 09       	sbc	r21, r1
    220e:	c9 01       	movw	r24, r18
    2210:	1f 91       	pop	r17
    2212:	0f 91       	pop	r16
    2214:	ff 90       	pop	r15
    2216:	ef 90       	pop	r14
    2218:	08 95       	ret

0000221a <__pack_f>:
    221a:	df 92       	push	r13
    221c:	ef 92       	push	r14
    221e:	ff 92       	push	r15
    2220:	0f 93       	push	r16
    2222:	1f 93       	push	r17
    2224:	fc 01       	movw	r30, r24
    2226:	e4 80       	ldd	r14, Z+4	; 0x04
    2228:	f5 80       	ldd	r15, Z+5	; 0x05
    222a:	06 81       	ldd	r16, Z+6	; 0x06
    222c:	17 81       	ldd	r17, Z+7	; 0x07
    222e:	d1 80       	ldd	r13, Z+1	; 0x01
    2230:	80 81       	ld	r24, Z
    2232:	82 30       	cpi	r24, 0x02	; 2
    2234:	48 f4       	brcc	.+18     	; 0x2248 <__pack_f+0x2e>
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	a0 e1       	ldi	r26, 0x10	; 16
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e8 2a       	or	r14, r24
    2240:	f9 2a       	or	r15, r25
    2242:	0a 2b       	or	r16, r26
    2244:	1b 2b       	or	r17, r27
    2246:	a5 c0       	rjmp	.+330    	; 0x2392 <__pack_f+0x178>
    2248:	84 30       	cpi	r24, 0x04	; 4
    224a:	09 f4       	brne	.+2      	; 0x224e <__pack_f+0x34>
    224c:	9f c0       	rjmp	.+318    	; 0x238c <__pack_f+0x172>
    224e:	82 30       	cpi	r24, 0x02	; 2
    2250:	21 f4       	brne	.+8      	; 0x225a <__pack_f+0x40>
    2252:	ee 24       	eor	r14, r14
    2254:	ff 24       	eor	r15, r15
    2256:	87 01       	movw	r16, r14
    2258:	05 c0       	rjmp	.+10     	; 0x2264 <__pack_f+0x4a>
    225a:	e1 14       	cp	r14, r1
    225c:	f1 04       	cpc	r15, r1
    225e:	01 05       	cpc	r16, r1
    2260:	11 05       	cpc	r17, r1
    2262:	19 f4       	brne	.+6      	; 0x226a <__pack_f+0x50>
    2264:	e0 e0       	ldi	r30, 0x00	; 0
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	96 c0       	rjmp	.+300    	; 0x2396 <__pack_f+0x17c>
    226a:	62 81       	ldd	r22, Z+2	; 0x02
    226c:	73 81       	ldd	r23, Z+3	; 0x03
    226e:	9f ef       	ldi	r25, 0xFF	; 255
    2270:	62 38       	cpi	r22, 0x82	; 130
    2272:	79 07       	cpc	r23, r25
    2274:	0c f0       	brlt	.+2      	; 0x2278 <__pack_f+0x5e>
    2276:	5b c0       	rjmp	.+182    	; 0x232e <__pack_f+0x114>
    2278:	22 e8       	ldi	r18, 0x82	; 130
    227a:	3f ef       	ldi	r19, 0xFF	; 255
    227c:	26 1b       	sub	r18, r22
    227e:	37 0b       	sbc	r19, r23
    2280:	2a 31       	cpi	r18, 0x1A	; 26
    2282:	31 05       	cpc	r19, r1
    2284:	2c f0       	brlt	.+10     	; 0x2290 <__pack_f+0x76>
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	2a c0       	rjmp	.+84     	; 0x22e4 <__pack_f+0xca>
    2290:	b8 01       	movw	r22, r16
    2292:	a7 01       	movw	r20, r14
    2294:	02 2e       	mov	r0, r18
    2296:	04 c0       	rjmp	.+8      	; 0x22a0 <__pack_f+0x86>
    2298:	76 95       	lsr	r23
    229a:	67 95       	ror	r22
    229c:	57 95       	ror	r21
    229e:	47 95       	ror	r20
    22a0:	0a 94       	dec	r0
    22a2:	d2 f7       	brpl	.-12     	; 0x2298 <__pack_f+0x7e>
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a0 e0       	ldi	r26, 0x00	; 0
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <__pack_f+0x9c>
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	aa 1f       	adc	r26, r26
    22b4:	bb 1f       	adc	r27, r27
    22b6:	2a 95       	dec	r18
    22b8:	d2 f7       	brpl	.-12     	; 0x22ae <__pack_f+0x94>
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	a1 09       	sbc	r26, r1
    22be:	b1 09       	sbc	r27, r1
    22c0:	8e 21       	and	r24, r14
    22c2:	9f 21       	and	r25, r15
    22c4:	a0 23       	and	r26, r16
    22c6:	b1 23       	and	r27, r17
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	a1 05       	cpc	r26, r1
    22cc:	b1 05       	cpc	r27, r1
    22ce:	21 f0       	breq	.+8      	; 0x22d8 <__pack_f+0xbe>
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	a0 e0       	ldi	r26, 0x00	; 0
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	9a 01       	movw	r18, r20
    22da:	ab 01       	movw	r20, r22
    22dc:	28 2b       	or	r18, r24
    22de:	39 2b       	or	r19, r25
    22e0:	4a 2b       	or	r20, r26
    22e2:	5b 2b       	or	r21, r27
    22e4:	da 01       	movw	r26, r20
    22e6:	c9 01       	movw	r24, r18
    22e8:	8f 77       	andi	r24, 0x7F	; 127
    22ea:	90 70       	andi	r25, 0x00	; 0
    22ec:	a0 70       	andi	r26, 0x00	; 0
    22ee:	b0 70       	andi	r27, 0x00	; 0
    22f0:	80 34       	cpi	r24, 0x40	; 64
    22f2:	91 05       	cpc	r25, r1
    22f4:	a1 05       	cpc	r26, r1
    22f6:	b1 05       	cpc	r27, r1
    22f8:	39 f4       	brne	.+14     	; 0x2308 <__pack_f+0xee>
    22fa:	27 ff       	sbrs	r18, 7
    22fc:	09 c0       	rjmp	.+18     	; 0x2310 <__pack_f+0xf6>
    22fe:	20 5c       	subi	r18, 0xC0	; 192
    2300:	3f 4f       	sbci	r19, 0xFF	; 255
    2302:	4f 4f       	sbci	r20, 0xFF	; 255
    2304:	5f 4f       	sbci	r21, 0xFF	; 255
    2306:	04 c0       	rjmp	.+8      	; 0x2310 <__pack_f+0xf6>
    2308:	21 5c       	subi	r18, 0xC1	; 193
    230a:	3f 4f       	sbci	r19, 0xFF	; 255
    230c:	4f 4f       	sbci	r20, 0xFF	; 255
    230e:	5f 4f       	sbci	r21, 0xFF	; 255
    2310:	e0 e0       	ldi	r30, 0x00	; 0
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	20 30       	cpi	r18, 0x00	; 0
    2316:	a0 e0       	ldi	r26, 0x00	; 0
    2318:	3a 07       	cpc	r19, r26
    231a:	a0 e0       	ldi	r26, 0x00	; 0
    231c:	4a 07       	cpc	r20, r26
    231e:	a0 e4       	ldi	r26, 0x40	; 64
    2320:	5a 07       	cpc	r21, r26
    2322:	10 f0       	brcs	.+4      	; 0x2328 <__pack_f+0x10e>
    2324:	e1 e0       	ldi	r30, 0x01	; 1
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	79 01       	movw	r14, r18
    232a:	8a 01       	movw	r16, r20
    232c:	27 c0       	rjmp	.+78     	; 0x237c <__pack_f+0x162>
    232e:	60 38       	cpi	r22, 0x80	; 128
    2330:	71 05       	cpc	r23, r1
    2332:	64 f5       	brge	.+88     	; 0x238c <__pack_f+0x172>
    2334:	fb 01       	movw	r30, r22
    2336:	e1 58       	subi	r30, 0x81	; 129
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	d8 01       	movw	r26, r16
    233c:	c7 01       	movw	r24, r14
    233e:	8f 77       	andi	r24, 0x7F	; 127
    2340:	90 70       	andi	r25, 0x00	; 0
    2342:	a0 70       	andi	r26, 0x00	; 0
    2344:	b0 70       	andi	r27, 0x00	; 0
    2346:	80 34       	cpi	r24, 0x40	; 64
    2348:	91 05       	cpc	r25, r1
    234a:	a1 05       	cpc	r26, r1
    234c:	b1 05       	cpc	r27, r1
    234e:	39 f4       	brne	.+14     	; 0x235e <__pack_f+0x144>
    2350:	e7 fe       	sbrs	r14, 7
    2352:	0d c0       	rjmp	.+26     	; 0x236e <__pack_f+0x154>
    2354:	80 e4       	ldi	r24, 0x40	; 64
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e0       	ldi	r26, 0x00	; 0
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	04 c0       	rjmp	.+8      	; 0x2366 <__pack_f+0x14c>
    235e:	8f e3       	ldi	r24, 0x3F	; 63
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	a0 e0       	ldi	r26, 0x00	; 0
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e8 0e       	add	r14, r24
    2368:	f9 1e       	adc	r15, r25
    236a:	0a 1f       	adc	r16, r26
    236c:	1b 1f       	adc	r17, r27
    236e:	17 ff       	sbrs	r17, 7
    2370:	05 c0       	rjmp	.+10     	; 0x237c <__pack_f+0x162>
    2372:	16 95       	lsr	r17
    2374:	07 95       	ror	r16
    2376:	f7 94       	ror	r15
    2378:	e7 94       	ror	r14
    237a:	31 96       	adiw	r30, 0x01	; 1
    237c:	87 e0       	ldi	r24, 0x07	; 7
    237e:	16 95       	lsr	r17
    2380:	07 95       	ror	r16
    2382:	f7 94       	ror	r15
    2384:	e7 94       	ror	r14
    2386:	8a 95       	dec	r24
    2388:	d1 f7       	brne	.-12     	; 0x237e <__pack_f+0x164>
    238a:	05 c0       	rjmp	.+10     	; 0x2396 <__pack_f+0x17c>
    238c:	ee 24       	eor	r14, r14
    238e:	ff 24       	eor	r15, r15
    2390:	87 01       	movw	r16, r14
    2392:	ef ef       	ldi	r30, 0xFF	; 255
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	6e 2f       	mov	r22, r30
    2398:	67 95       	ror	r22
    239a:	66 27       	eor	r22, r22
    239c:	67 95       	ror	r22
    239e:	90 2f       	mov	r25, r16
    23a0:	9f 77       	andi	r25, 0x7F	; 127
    23a2:	d7 94       	ror	r13
    23a4:	dd 24       	eor	r13, r13
    23a6:	d7 94       	ror	r13
    23a8:	8e 2f       	mov	r24, r30
    23aa:	86 95       	lsr	r24
    23ac:	49 2f       	mov	r20, r25
    23ae:	46 2b       	or	r20, r22
    23b0:	58 2f       	mov	r21, r24
    23b2:	5d 29       	or	r21, r13
    23b4:	b7 01       	movw	r22, r14
    23b6:	ca 01       	movw	r24, r20
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	ff 90       	pop	r15
    23be:	ef 90       	pop	r14
    23c0:	df 90       	pop	r13
    23c2:	08 95       	ret

000023c4 <__unpack_f>:
    23c4:	fc 01       	movw	r30, r24
    23c6:	db 01       	movw	r26, r22
    23c8:	40 81       	ld	r20, Z
    23ca:	51 81       	ldd	r21, Z+1	; 0x01
    23cc:	22 81       	ldd	r18, Z+2	; 0x02
    23ce:	62 2f       	mov	r22, r18
    23d0:	6f 77       	andi	r22, 0x7F	; 127
    23d2:	70 e0       	ldi	r23, 0x00	; 0
    23d4:	22 1f       	adc	r18, r18
    23d6:	22 27       	eor	r18, r18
    23d8:	22 1f       	adc	r18, r18
    23da:	93 81       	ldd	r25, Z+3	; 0x03
    23dc:	89 2f       	mov	r24, r25
    23de:	88 0f       	add	r24, r24
    23e0:	82 2b       	or	r24, r18
    23e2:	28 2f       	mov	r18, r24
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	99 1f       	adc	r25, r25
    23e8:	99 27       	eor	r25, r25
    23ea:	99 1f       	adc	r25, r25
    23ec:	11 96       	adiw	r26, 0x01	; 1
    23ee:	9c 93       	st	X, r25
    23f0:	11 97       	sbiw	r26, 0x01	; 1
    23f2:	21 15       	cp	r18, r1
    23f4:	31 05       	cpc	r19, r1
    23f6:	a9 f5       	brne	.+106    	; 0x2462 <__unpack_f+0x9e>
    23f8:	41 15       	cp	r20, r1
    23fa:	51 05       	cpc	r21, r1
    23fc:	61 05       	cpc	r22, r1
    23fe:	71 05       	cpc	r23, r1
    2400:	11 f4       	brne	.+4      	; 0x2406 <__unpack_f+0x42>
    2402:	82 e0       	ldi	r24, 0x02	; 2
    2404:	37 c0       	rjmp	.+110    	; 0x2474 <__unpack_f+0xb0>
    2406:	82 e8       	ldi	r24, 0x82	; 130
    2408:	9f ef       	ldi	r25, 0xFF	; 255
    240a:	13 96       	adiw	r26, 0x03	; 3
    240c:	9c 93       	st	X, r25
    240e:	8e 93       	st	-X, r24
    2410:	12 97       	sbiw	r26, 0x02	; 2
    2412:	9a 01       	movw	r18, r20
    2414:	ab 01       	movw	r20, r22
    2416:	67 e0       	ldi	r22, 0x07	; 7
    2418:	22 0f       	add	r18, r18
    241a:	33 1f       	adc	r19, r19
    241c:	44 1f       	adc	r20, r20
    241e:	55 1f       	adc	r21, r21
    2420:	6a 95       	dec	r22
    2422:	d1 f7       	brne	.-12     	; 0x2418 <__unpack_f+0x54>
    2424:	83 e0       	ldi	r24, 0x03	; 3
    2426:	8c 93       	st	X, r24
    2428:	0d c0       	rjmp	.+26     	; 0x2444 <__unpack_f+0x80>
    242a:	22 0f       	add	r18, r18
    242c:	33 1f       	adc	r19, r19
    242e:	44 1f       	adc	r20, r20
    2430:	55 1f       	adc	r21, r21
    2432:	12 96       	adiw	r26, 0x02	; 2
    2434:	8d 91       	ld	r24, X+
    2436:	9c 91       	ld	r25, X
    2438:	13 97       	sbiw	r26, 0x03	; 3
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	13 96       	adiw	r26, 0x03	; 3
    243e:	9c 93       	st	X, r25
    2440:	8e 93       	st	-X, r24
    2442:	12 97       	sbiw	r26, 0x02	; 2
    2444:	20 30       	cpi	r18, 0x00	; 0
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	38 07       	cpc	r19, r24
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	48 07       	cpc	r20, r24
    244e:	80 e4       	ldi	r24, 0x40	; 64
    2450:	58 07       	cpc	r21, r24
    2452:	58 f3       	brcs	.-42     	; 0x242a <__unpack_f+0x66>
    2454:	14 96       	adiw	r26, 0x04	; 4
    2456:	2d 93       	st	X+, r18
    2458:	3d 93       	st	X+, r19
    245a:	4d 93       	st	X+, r20
    245c:	5c 93       	st	X, r21
    245e:	17 97       	sbiw	r26, 0x07	; 7
    2460:	08 95       	ret
    2462:	2f 3f       	cpi	r18, 0xFF	; 255
    2464:	31 05       	cpc	r19, r1
    2466:	79 f4       	brne	.+30     	; 0x2486 <__unpack_f+0xc2>
    2468:	41 15       	cp	r20, r1
    246a:	51 05       	cpc	r21, r1
    246c:	61 05       	cpc	r22, r1
    246e:	71 05       	cpc	r23, r1
    2470:	19 f4       	brne	.+6      	; 0x2478 <__unpack_f+0xb4>
    2472:	84 e0       	ldi	r24, 0x04	; 4
    2474:	8c 93       	st	X, r24
    2476:	08 95       	ret
    2478:	64 ff       	sbrs	r22, 4
    247a:	03 c0       	rjmp	.+6      	; 0x2482 <__unpack_f+0xbe>
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	8c 93       	st	X, r24
    2480:	12 c0       	rjmp	.+36     	; 0x24a6 <__unpack_f+0xe2>
    2482:	1c 92       	st	X, r1
    2484:	10 c0       	rjmp	.+32     	; 0x24a6 <__unpack_f+0xe2>
    2486:	2f 57       	subi	r18, 0x7F	; 127
    2488:	30 40       	sbci	r19, 0x00	; 0
    248a:	13 96       	adiw	r26, 0x03	; 3
    248c:	3c 93       	st	X, r19
    248e:	2e 93       	st	-X, r18
    2490:	12 97       	sbiw	r26, 0x02	; 2
    2492:	83 e0       	ldi	r24, 0x03	; 3
    2494:	8c 93       	st	X, r24
    2496:	87 e0       	ldi	r24, 0x07	; 7
    2498:	44 0f       	add	r20, r20
    249a:	55 1f       	adc	r21, r21
    249c:	66 1f       	adc	r22, r22
    249e:	77 1f       	adc	r23, r23
    24a0:	8a 95       	dec	r24
    24a2:	d1 f7       	brne	.-12     	; 0x2498 <__unpack_f+0xd4>
    24a4:	70 64       	ori	r23, 0x40	; 64
    24a6:	14 96       	adiw	r26, 0x04	; 4
    24a8:	4d 93       	st	X+, r20
    24aa:	5d 93       	st	X+, r21
    24ac:	6d 93       	st	X+, r22
    24ae:	7c 93       	st	X, r23
    24b0:	17 97       	sbiw	r26, 0x07	; 7
    24b2:	08 95       	ret

000024b4 <__fpcmp_parts_f>:
    24b4:	1f 93       	push	r17
    24b6:	dc 01       	movw	r26, r24
    24b8:	fb 01       	movw	r30, r22
    24ba:	9c 91       	ld	r25, X
    24bc:	92 30       	cpi	r25, 0x02	; 2
    24be:	08 f4       	brcc	.+2      	; 0x24c2 <__fpcmp_parts_f+0xe>
    24c0:	47 c0       	rjmp	.+142    	; 0x2550 <__fpcmp_parts_f+0x9c>
    24c2:	80 81       	ld	r24, Z
    24c4:	82 30       	cpi	r24, 0x02	; 2
    24c6:	08 f4       	brcc	.+2      	; 0x24ca <__fpcmp_parts_f+0x16>
    24c8:	43 c0       	rjmp	.+134    	; 0x2550 <__fpcmp_parts_f+0x9c>
    24ca:	94 30       	cpi	r25, 0x04	; 4
    24cc:	51 f4       	brne	.+20     	; 0x24e2 <__fpcmp_parts_f+0x2e>
    24ce:	11 96       	adiw	r26, 0x01	; 1
    24d0:	1c 91       	ld	r17, X
    24d2:	84 30       	cpi	r24, 0x04	; 4
    24d4:	99 f5       	brne	.+102    	; 0x253c <__fpcmp_parts_f+0x88>
    24d6:	81 81       	ldd	r24, Z+1	; 0x01
    24d8:	68 2f       	mov	r22, r24
    24da:	70 e0       	ldi	r23, 0x00	; 0
    24dc:	61 1b       	sub	r22, r17
    24de:	71 09       	sbc	r23, r1
    24e0:	3f c0       	rjmp	.+126    	; 0x2560 <__fpcmp_parts_f+0xac>
    24e2:	84 30       	cpi	r24, 0x04	; 4
    24e4:	21 f0       	breq	.+8      	; 0x24ee <__fpcmp_parts_f+0x3a>
    24e6:	92 30       	cpi	r25, 0x02	; 2
    24e8:	31 f4       	brne	.+12     	; 0x24f6 <__fpcmp_parts_f+0x42>
    24ea:	82 30       	cpi	r24, 0x02	; 2
    24ec:	b9 f1       	breq	.+110    	; 0x255c <__fpcmp_parts_f+0xa8>
    24ee:	81 81       	ldd	r24, Z+1	; 0x01
    24f0:	88 23       	and	r24, r24
    24f2:	89 f1       	breq	.+98     	; 0x2556 <__fpcmp_parts_f+0xa2>
    24f4:	2d c0       	rjmp	.+90     	; 0x2550 <__fpcmp_parts_f+0x9c>
    24f6:	11 96       	adiw	r26, 0x01	; 1
    24f8:	1c 91       	ld	r17, X
    24fa:	11 97       	sbiw	r26, 0x01	; 1
    24fc:	82 30       	cpi	r24, 0x02	; 2
    24fe:	f1 f0       	breq	.+60     	; 0x253c <__fpcmp_parts_f+0x88>
    2500:	81 81       	ldd	r24, Z+1	; 0x01
    2502:	18 17       	cp	r17, r24
    2504:	d9 f4       	brne	.+54     	; 0x253c <__fpcmp_parts_f+0x88>
    2506:	12 96       	adiw	r26, 0x02	; 2
    2508:	2d 91       	ld	r18, X+
    250a:	3c 91       	ld	r19, X
    250c:	13 97       	sbiw	r26, 0x03	; 3
    250e:	82 81       	ldd	r24, Z+2	; 0x02
    2510:	93 81       	ldd	r25, Z+3	; 0x03
    2512:	82 17       	cp	r24, r18
    2514:	93 07       	cpc	r25, r19
    2516:	94 f0       	brlt	.+36     	; 0x253c <__fpcmp_parts_f+0x88>
    2518:	28 17       	cp	r18, r24
    251a:	39 07       	cpc	r19, r25
    251c:	bc f0       	brlt	.+46     	; 0x254c <__fpcmp_parts_f+0x98>
    251e:	14 96       	adiw	r26, 0x04	; 4
    2520:	8d 91       	ld	r24, X+
    2522:	9d 91       	ld	r25, X+
    2524:	0d 90       	ld	r0, X+
    2526:	bc 91       	ld	r27, X
    2528:	a0 2d       	mov	r26, r0
    252a:	24 81       	ldd	r18, Z+4	; 0x04
    252c:	35 81       	ldd	r19, Z+5	; 0x05
    252e:	46 81       	ldd	r20, Z+6	; 0x06
    2530:	57 81       	ldd	r21, Z+7	; 0x07
    2532:	28 17       	cp	r18, r24
    2534:	39 07       	cpc	r19, r25
    2536:	4a 07       	cpc	r20, r26
    2538:	5b 07       	cpc	r21, r27
    253a:	18 f4       	brcc	.+6      	; 0x2542 <__fpcmp_parts_f+0x8e>
    253c:	11 23       	and	r17, r17
    253e:	41 f0       	breq	.+16     	; 0x2550 <__fpcmp_parts_f+0x9c>
    2540:	0a c0       	rjmp	.+20     	; 0x2556 <__fpcmp_parts_f+0xa2>
    2542:	82 17       	cp	r24, r18
    2544:	93 07       	cpc	r25, r19
    2546:	a4 07       	cpc	r26, r20
    2548:	b5 07       	cpc	r27, r21
    254a:	40 f4       	brcc	.+16     	; 0x255c <__fpcmp_parts_f+0xa8>
    254c:	11 23       	and	r17, r17
    254e:	19 f0       	breq	.+6      	; 0x2556 <__fpcmp_parts_f+0xa2>
    2550:	61 e0       	ldi	r22, 0x01	; 1
    2552:	70 e0       	ldi	r23, 0x00	; 0
    2554:	05 c0       	rjmp	.+10     	; 0x2560 <__fpcmp_parts_f+0xac>
    2556:	6f ef       	ldi	r22, 0xFF	; 255
    2558:	7f ef       	ldi	r23, 0xFF	; 255
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <__fpcmp_parts_f+0xac>
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	cb 01       	movw	r24, r22
    2562:	1f 91       	pop	r17
    2564:	08 95       	ret

00002566 <__udivmodhi4>:
    2566:	aa 1b       	sub	r26, r26
    2568:	bb 1b       	sub	r27, r27
    256a:	51 e1       	ldi	r21, 0x11	; 17
    256c:	07 c0       	rjmp	.+14     	; 0x257c <__udivmodhi4_ep>

0000256e <__udivmodhi4_loop>:
    256e:	aa 1f       	adc	r26, r26
    2570:	bb 1f       	adc	r27, r27
    2572:	a6 17       	cp	r26, r22
    2574:	b7 07       	cpc	r27, r23
    2576:	10 f0       	brcs	.+4      	; 0x257c <__udivmodhi4_ep>
    2578:	a6 1b       	sub	r26, r22
    257a:	b7 0b       	sbc	r27, r23

0000257c <__udivmodhi4_ep>:
    257c:	88 1f       	adc	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	5a 95       	dec	r21
    2582:	a9 f7       	brne	.-22     	; 0x256e <__udivmodhi4_loop>
    2584:	80 95       	com	r24
    2586:	90 95       	com	r25
    2588:	bc 01       	movw	r22, r24
    258a:	cd 01       	movw	r24, r26
    258c:	08 95       	ret

0000258e <__divmodhi4>:
    258e:	97 fb       	bst	r25, 7
    2590:	09 2e       	mov	r0, r25
    2592:	07 26       	eor	r0, r23
    2594:	0a d0       	rcall	.+20     	; 0x25aa <__divmodhi4_neg1>
    2596:	77 fd       	sbrc	r23, 7
    2598:	04 d0       	rcall	.+8      	; 0x25a2 <__divmodhi4_neg2>
    259a:	e5 df       	rcall	.-54     	; 0x2566 <__udivmodhi4>
    259c:	06 d0       	rcall	.+12     	; 0x25aa <__divmodhi4_neg1>
    259e:	00 20       	and	r0, r0
    25a0:	1a f4       	brpl	.+6      	; 0x25a8 <__divmodhi4_exit>

000025a2 <__divmodhi4_neg2>:
    25a2:	70 95       	com	r23
    25a4:	61 95       	neg	r22
    25a6:	7f 4f       	sbci	r23, 0xFF	; 255

000025a8 <__divmodhi4_exit>:
    25a8:	08 95       	ret

000025aa <__divmodhi4_neg1>:
    25aa:	f6 f7       	brtc	.-4      	; 0x25a8 <__divmodhi4_exit>
    25ac:	90 95       	com	r25
    25ae:	81 95       	neg	r24
    25b0:	9f 4f       	sbci	r25, 0xFF	; 255
    25b2:	08 95       	ret

000025b4 <__prologue_saves__>:
    25b4:	2f 92       	push	r2
    25b6:	3f 92       	push	r3
    25b8:	4f 92       	push	r4
    25ba:	5f 92       	push	r5
    25bc:	6f 92       	push	r6
    25be:	7f 92       	push	r7
    25c0:	8f 92       	push	r8
    25c2:	9f 92       	push	r9
    25c4:	af 92       	push	r10
    25c6:	bf 92       	push	r11
    25c8:	cf 92       	push	r12
    25ca:	df 92       	push	r13
    25cc:	ef 92       	push	r14
    25ce:	ff 92       	push	r15
    25d0:	0f 93       	push	r16
    25d2:	1f 93       	push	r17
    25d4:	cf 93       	push	r28
    25d6:	df 93       	push	r29
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	ca 1b       	sub	r28, r26
    25de:	db 0b       	sbc	r29, r27
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
    25ea:	09 94       	ijmp

000025ec <__epilogue_restores__>:
    25ec:	2a 88       	ldd	r2, Y+18	; 0x12
    25ee:	39 88       	ldd	r3, Y+17	; 0x11
    25f0:	48 88       	ldd	r4, Y+16	; 0x10
    25f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    25f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    25f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    25f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    25fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    25fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    25fe:	b9 84       	ldd	r11, Y+9	; 0x09
    2600:	c8 84       	ldd	r12, Y+8	; 0x08
    2602:	df 80       	ldd	r13, Y+7	; 0x07
    2604:	ee 80       	ldd	r14, Y+6	; 0x06
    2606:	fd 80       	ldd	r15, Y+5	; 0x05
    2608:	0c 81       	ldd	r16, Y+4	; 0x04
    260a:	1b 81       	ldd	r17, Y+3	; 0x03
    260c:	aa 81       	ldd	r26, Y+2	; 0x02
    260e:	b9 81       	ldd	r27, Y+1	; 0x01
    2610:	ce 0f       	add	r28, r30
    2612:	d1 1d       	adc	r29, r1
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	ed 01       	movw	r28, r26
    2620:	08 95       	ret

00002622 <_exit>:
    2622:	f8 94       	cli

00002624 <__stop_program>:
    2624:	ff cf       	rjmp	.-2      	; 0x2624 <__stop_program>
